[["_main.html", "The Epidemiologist R Handbook 1 output: bookdown::gitbook: R for applied epidemiology and public health How to use this handbook Acknowledgements Terms of Use and Contribution 2 Editorial and technical notes 2.1 Approach and style 2.2 Editorial decisions 2.3 Major revisions 2.4 Session info (R, RStudio, packages) 3 Download handbook and data 3.1 Download offline handbook 3.2 Download data to follow along 4 Misingi ya R 4.1 Kwanini Utumie R? 4.2 Masharti muhimu 4.3 Rasilimali za kujifunza 4.4 Ufungaji 4.5 RStudio 4.6 Kazi 4.7 Vifurushi 4.8 Hati 4.9 Saraka ya kufanya kazi 4.10 Vitu 4.11 Piping (%&gt;%) 4.12 Key operators and functions 4.13 Errors &amp; warnings 5 Transition to R 5.1 From Excel 5.2 From Stata 5.3 From SAS 5.4 Data interoperability 6 Suggested packages 6.1 Packages from CRAN 6.2 Packages from Github 7 R projects 7.1 Suggested use 7.2 Creating an R project 7.3 Examples 7.4 Resources 8 Import and export 8.1 Overview 8.2 The rio package 8.3 The here package 8.4 File paths 8.5 Import data 8.6 Multiple files - import, export, split, combine 8.7 Import from Github 8.8 Manual data entry 8.9 Import most recent file 8.10 APIs 8.11 Export 8.12 RDS files 8.13 Rdata files and lists 8.14 Saving plots 8.15 Resources 9 Cleaning data and core functions 9.1 Cleaning pipeline 9.2 Load packages 9.3 Import data 9.4 Column names 9.5 Select or re-order columns 9.6 Deduplication 9.7 Column creation and transformation 9.8 Re-code values 9.9 Numeric categories 9.10 Add rows 9.11 Filter rows 9.12 Row-wise calculations 9.13 Arrange and sort 10 Working with dates 10.1 Preparation 10.2 Current date 10.3 Convert to Date 10.4 Excel dates 10.5 Messy dates 10.6 Working with date-time class 10.7 Working with dates 10.8 Date display 10.9 Epidemiological weeks 10.10 Converting dates/time zones 10.11 Lagging and leading calculations 10.12 Resources 11 Characters and strings 11.1 Preparation 11.2 Unite, split, and arrange 11.3 Clean and standardise 11.4 Handle by position 11.5 Patterns 11.6 Special characters 11.7 Regular expressions (regex) 11.8 Regex and special characters 11.9 Resources 12 Factors 12.1 Preparation 12.2 Convert to factor 12.3 Add or drop levels 12.4 Adjust level order 12.5 Missing values 12.6 Combine levels 12.7 Show all levels 12.8 Epiweeks 12.9 Resources 13 Pivoting data 13.1 Preparation 13.2 Wide-to-long 13.3 Long-to-wide 13.4 Fill 13.5 Resources 14 Grouping data 14.1 Preparation 14.2 Grouping 14.3 Un-group 14.4 Summarise 14.5 Counts and tallies 14.6 Grouping by date 14.7 Arranging grouped data 14.8 Filter on grouped data 14.9 Mutate on grouped data 14.10 Select on grouped data 14.11 Resources 15 Joining data 15.1 Preparation 15.2 dplyr joins 15.3 Probabalistic matching 15.4 Binding and aligning 15.5 Resources 16 De-duplication 16.1 Preparation 16.2 Deduplication 16.3 Slicing 16.4 Roll-up values 16.5 Probabilistic de-duplication 16.6 Resources 17 Iteration, loops, and lists 17.1 Preparation 17.2 for loops 17.3 purrr and lists 17.4 Apply functions 17.5 Resources 18 Descriptive tables 18.1 Preparation 18.2 Browse data 18.3 janitor package 18.4 dplyr package 18.5 gtsummary package 18.6 base R 18.7 Resources 19 Simple statistical tests 19.1 Preparation 19.2 base R 19.3 rstatix package 19.4 gtsummary package 19.5 Correlations 19.6 Resources 20 Univariate and multivariable regression 20.1 Preparation 20.2 Univariate 20.3 Stratified 20.4 Multivariable 20.5 Forest plot 20.6 Resources 21 Missing data 21.1 Preparation 21.2 Missing values in R 21.3 Useful functions 21.4 Assess missingness in a data frame 21.5 Using data with missing values 21.6 Imputation 21.7 Resources 22 Standardised rates 22.1 Overview 22.2 Preparation 22.3 dsr package 22.4 PHEindicatormethods package 22.5 Resources 23 Moving averages 23.1 Preparation 23.2 Calculate with slider 23.3 Calculate with tidyquant within ggplot() 23.4 Resources 24 Time series and outbreak detection 24.1 Overview 24.2 Preparation 24.3 Time series data 24.4 Descriptive analysis 24.5 Fitting regressions 24.6 Relation of two time series 24.7 Outbreak detection 24.8 Interrupted timeseries 24.9 Resources 25 Epidemic modeling 25.1 Overview 25.2 Preparation 25.3 Estimating Rt 25.4 Projecting incidence 25.5 Resources 26 Contact tracing 26.1 Preparation 26.2 Descriptive analyses 26.3 Contact Follow Up 26.4 KPI Tables 26.5 Transmission Matrices 26.6 Resources 27 Survey analysis 27.1 Overview 27.2 Preparation 27.3 Survey data 27.4 Observation time 27.5 Weighting 27.6 Survey design objects 27.7 Descriptive analysis 27.8 Weighted proportions 27.9 Weighted ratios 27.10 Resources 28 Survival analysis 28.1 Overview 28.2 Preparation 28.3 Basics of survival analysis 28.4 Comparison of survival curves 28.5 Cox regression analysis 28.6 Time-dependent covariates in survival models 28.7 Resources 29 GIS basics 29.1 Overview 29.2 Key terms 29.3 Getting started with GIS 29.4 Preparation 29.5 Plotting coordinates 29.6 Spatial joins 29.7 Choropleth maps 29.8 Mapping with ggplot2 29.9 Basemaps 29.10 Contoured density heatmaps 29.11 Spatial statistics 29.12 Resources 30 Tables for presentation 30.1 Preparation 30.2 Basic flextable 30.3 Conditional formatting 30.4 All code together 30.5 Saving your table 30.6 Resources 31 ggplot basics 31.1 Preparation 31.2 Basics of ggplot 31.3 ggplot() 31.4 Geoms 31.5 Mapping data to the plot 31.6 Facets / Small-multiples 31.7 Storing plots 31.8 Labels 31.9 Themes 31.10 Colors 31.11 Piping into ggplot2 31.12 Plot continuous data 31.13 Plot categorical data 31.14 Resources 32 ggplot tips 32.1 Preparation 32.2 Scales for color, fill, axes, etc. 32.3 Change order of discrete variables 32.4 Contour lines 32.5 Marginal distributions 32.6 Smart Labeling 32.7 Time axes 32.8 Highlighting 32.9 Plotting multiple datasets 32.10 Combine plots 32.11 Dual axes 32.12 Packages to help you 32.13 Miscellaneous 32.14 Resources 33 Epidemic curves 33.1 Preparation 33.2 Epicurves with incidence2 package 33.3 Epicurves with ggplot2 33.4 Tentative data 33.5 Multi-level date labels 33.6 Dual-axis 33.7 Cumulative Incidence 33.8 Resources 34 Demographic pyramids and Likert-scales 34.1 Preparation 34.2 apyramid package 34.3 ggplot() 34.4 Likert scale 34.5 Resources 35 Heat plots 35.1 Preparation 35.2 Transmission matrix 35.3 Reporting metrics over time 35.4 Resources 36 Diagrams and charts 36.1 Preparation 36.2 Flow diagrams 36.3 Alluvial/Sankey Diagrams 36.4 Event timelines 36.5 DAGs 36.6 Resources 37 Combinations analysis 37.1 Preparation 37.2 ggupset 37.3 UpSetR 37.4 Resources 38 Transmission chains 38.1 Overview 38.2 Preparation 38.3 Handling 38.4 Visualization 38.5 Analysis 38.6 Resources 39 Phylogenetic trees 39.1 Overview 39.2 Preparation 39.3 Simple tree visualization 39.4 Tree manipulation More complex trees: adding heatmaps of sample data 39.5 Resources 40 Interactive plots 40.1 Preparation 40.2 Plot with ggplotly() 40.3 Modifications 40.4 Heat tiles 40.5 Resources 41 Reports with R Markdown 41.1 Preparation 41.2 Getting started 41.3 R Markdown components 41.4 File structure 41.5 Producing the document 41.6 Parameterised reports 41.7 Looping reports 41.8 Templates 41.9 Dynamic content 41.10 Resources 42 Organizing routine reports 42.1 Preparation 42.2 New factory 42.3 Create a report 42.4 Compile 42.5 Outputs 42.6 Miscellaneous 42.7 Resources 43 Dashboards with R Markdown 43.1 Preparation 43.2 Create new R Markdown 43.3 The script 43.4 Section attributes 43.5 Layout 43.6 Adding content 43.7 Code organization 43.8 Shiny 43.9 Sharing 43.10 Resources 44 Dashboards with Shiny 44.1 Preparation 44.2 The structure of a shiny app 44.3 Building a UI 44.4 Loading data into our app 44.5 Developing an app server 44.6 Adding more functionality 44.7 Sharing shiny apps 44.8 Further reading 44.9 Recommended extension packages 44.10 Recommended resources 45 Writing functions 45.1 Preparation 45.2 Functions 45.3 Why would you use a function? 45.4 How does R build functions? 45.5 Basic syntax and structure 45.6 Examples 45.7 Using purrr: writing functions that can be iteratively applied 45.8 Tips and best Practices for well functioning functions 45.9 Resources 46 Directory interactions 46.1 Preparation 46.2 List files in a directory 46.3 File information 46.4 Check if exists 46.5 Create 46.6 Delete 46.7 Running other files 46.8 base R 46.9 Resources 47 Version control and collaboration with Git and Github 47.1 What is Git? 47.2 Why use the combo Git and Github? 47.3 Setup 47.4 Vocabulary, concepts and basic functions 47.5 Get started: create a new repository 47.6 Git + Github workflow 47.7 Create a new branch 47.8 Commit changes 47.9 Pull and push changes up to Github 47.10 Merge branch into Main 47.11 What we learned 47.12 Git commands 47.13 Resources 48 Common errors 48.1 Interpreting error messages 48.2 Common errors 48.3 Resources 49 Getting help 49.1 Github issues 49.2 Reproducible example 49.3 Posting to a forum 49.4 Resources 50 R on network drives 50.1 Overview 50.2 RStudio as administrator 50.3 Useful commands 50.4 Troubleshooting common errors 51 Data Table 51.1 Intro to data tables 51.2 Load packages and import data 51.3 The i argument: selecting and filtering rows 51.4 The j argument: selecting and computing on columns 51.5 The by argument: computing by groups 51.6 Adding and updating to data tables 51.7 Resources", " The Epidemiologist R Handbook the handbook team 2022-03-08 1 output: bookdown::gitbook: Placeholder R for applied epidemiology and public health How to use this handbook Acknowledgements Contributors Funding and support Inspiration Terms of Use and Contribution License Citation Contribution 2 Editorial and technical notes Placeholder 2.1 Approach and style R packages Code style Nomenclature Notes 2.2 Editorial decisions 2.3 Major revisions 2.4 Session info (R, RStudio, packages) 3 Download handbook and data Placeholder 3.1 Download offline handbook Use download link Use our R package 3.2 Download data to follow along Use our R package Download one-by-one Case linelist Malaria count data Likert-scale data Flexdashboard Contact Tracing GIS Phylogenetic trees Standardization Time series and outbreak detection Survey analysis Shiny 4 Misingi ya R Karibu! Ukurasa huu unakagua mambo muhimu ya R. Haikusudiwi kuwa mafunzo ya kina, lakini inatoa misingi na inaweza kuwa muhimu kwa kuburudisha kumbukumbu yako. Sehemu ya Nyenzo kwa ajili ya kujifunza inaunganisha kwa mafunzo ya kina zaidi. PSehemu za ukurasa huu zimerekebishwa kwa ruhusa kutoka kwa mradi wa R4Epis project. Tazama ukurasa wa Badilisha hadi R kwa vidokezo vya kubadilisha hadi R kutoka STATA, SAS, au Excel. 4.1 Kwanini Utumie R? Kama ilivyoelezwa kwenye tovuti ya mradi wa R, R ni lugha ya programu na mazingira ya kompyuta ya takwimu na michoro. Inatumika sana, inaweza kupanuliwa, na inaendeshwa na jamii. Gharama R ni bure kutumia! Kuna maadili dhabiti katika jamii ya nyenzo huria na huria. Uzalishaji Kufanya usimamizi na uchanganuzi wako wa data kupitia lugha ya programu (ikilinganishwa na Excel au zana nyingine ya kubofya-aina/kujitolea) huboresha uzalishaji tena, hurahisisha ugunduzi wa makosa, na kurahisisha mzigo wako wa kazi. Jumuiya Jumuiya ya R ya watumiaji ni kubwa na inashirikiana. Vifurushi vipya na zana za kushughulikia matatizo ya maisha halisi hutengenezwa kila siku, na kukaguliwa na jumuiya ya watumiaji. Kwa mfano, R-Ladies ni shirika la ulimwenguni pote ambalo dhamira yake ni kukuza tofauti za kijinsia katika jumuiya ya R, na ni mojawapo ya mashirika makubwa ya watumiaji wa R. Inawezekana ina sura karibu nawe! 4.2 Masharti muhimu RStudio - RStudio ni Kiolesura cha Mchoro cha Mtumiaji (GUI) kwa matumizi rahisi ya R. Soma zaidi katika sehemu ya RStudio. Vitu - Kila kitu unachohifadhi katika R - hifadhidata, vigeu, orodha ya majina ya vijiji, jumla ya idadi ya watu, hata matokeo kama vile grafu - ni vitu ambavyo vimepewa jina na vinaweza kurejelewa katika amri za baadaye. Soma zaidi katika sehemu ya Vitu Kazi za kukokotoa - Chaguo za kukokotoa ni operesheni ya msimbo ambayo inakubali ingizo na kurejesha pato lililobadilishwa. Soma zaidi katika sehemu ya Kazi. Vifurushi - Kifurushi cha R ni kifurushi cha vipengele vinavyoweza kushirikiwa. Soma zaidi katikasehemu ya Vifurushi. Hati - Hati ni faili ya hati inayoshikilia amri zako. Soma zaidikatika sehemu ya Hati 4.3 Rasilimali za kujifunza Rasimilali ya RStudio Nyaraka za Usaidizi Tafuta kichupo chaMsaada cha RStudio kwa nyaraka kwenye vifurushi vya R na vipengele maalum. Hii ni ndani ya kidirisha ambacho pia kina Faili, Viwanja, na Vifurushi (kawaida kwenye kidirisha cha chini kulia). Kama njia ya mkato, unaweza pia kuandika jina la kifurushi au chaguo la kukokotoa kwenye dashibodi ya R baada ya alama ya kuuliza ili kufungua ukurasa wa Usaidizi husika. Usijumuishe mabano. Kwa mfano: ?filter or ?diagrammeR. Mafunzo maingiliano Kuna njia kadhaa za kujifunza R kwa maingiliano ndani ya RStudio. RStudio yenyewe inatoa kidirisha cha Mafunzo ambacho kinatumia kifurushi cha learnr. Sakinisha kifurushi hiki na ufungue mafunzo kupitia kichupo kipya cha Mafunzo kwenye kidirisha cha juu kulia cha RStudio (ambacho pia kina vichupo vya Mazingira na Historia). Kifurushi cha swirl kinatoa kozi shirikishi katika R Console. Sakinisha na upakie kifurushi hiki, kisha endesha amri swirl() (mabano tupu) kwenye koni ya R. Utaona vidokezo kutokea kwenye Dashibodi. Jibu kwa kuandika kwenye Dashibodi. Itakuongoza kupitia kozi ya chaguo lako. Cheatsheets Kuna cheatsheets nyingi za PDF zinazopatikana kwenye Tovuti ya RStudio, kwa mfano: Mambo na kifurushi cha forcats Tarehe na nyakatu na kifurushi cha lubridate Minyororo na kifurushi cha stringr shughuli za mara kwa mara na kifurushi cha purrr Kuingiza data Cheatsheet ya Kubadilisha data kifurushi cha dplyr R Markdown (kuunda hati kama vile PDF, Word, Powerpoint) Shiny (kuunda programu wasilianifu za wavuti) Taswira ya data ukitumia kifurushi cha ggplot2 Upigaji ramani (GIS) kifurushi leaflet (ramani shirikishi) Python na R (kifurushi reticulate ) Hii ni rasilimali ya mtandaoni ya R mahususi kwawatumiaji wa Excel Twitter R ina jumuia mahiri ya twitter ambapo unaweza kujifunza vidokezo, njia za mkato na habari - fuata akaunti hizi: Tufuate! @epiRhandbook R Kazi moja Kwa Siku @rfuntionaday ni rarilimali ya ajabu R ya Sayansi ya Data @rstats4ds RStudio @RStudio Vidokezo vya RStudio @rstudiotips Wanablogu wa R @Rbloggers Wanawake wa R @RLadiesGlobal Hadley Wickham @hadleywickham Pia: #epitwitter and #rstats Rasilimali za mtandaoni za bure Maandishi ya uhakika ni kitabu chaR for Data Science cha Garrett Grolemund and Hadley Wickham Tovuti ya mradi wa R4Epis inalenga kutayarisha zana sanifu za kusafisha data, uchanganuzi na kuripoti ili kushughulikia aina za kawaida za milipuko na tafiti zinazozingatia idadi ya watu ambazo zingefanywa katika mpangilio wa majibu ya dharura ya MSF. Unaweza kupata nyenzo za mafunzo ya misingi ya R, violezo vya ripoti za RMarkdown kuhusu milipuko na tafiti, na mafunzo ya kukusaidia kuziweka. Lugha zingine isipokuwa Kiingereza Nyenzo za Rstudio kwa Kihispania Utangulizi wa R na tidyverse (Kifaransa) 4.4 Ufungaji R na RStudio Jinsi ya kufunga R Tembelea tovuti hii https://www.r-project.org/ na upakue toleo jipya zaidi la R linalofaa kwa kompyuta yako. Jinsi ya kufunga RStudio Tembelea tovuti hii https://rstudio.com/products/rstudio/download/ na upakue toleo jipya zaidi lisilolipishwa la Eneo-kazi la RStudio linalofaa kwa kompyuta yako. Ruhusa Kumbuka kwamba unapaswa kusakinisha R na RStudio kwenye kiendeshi ambacho umesoma na kuandika ruhusa. Vinginevyo, uwezo wako wa kusakinisha vifurushi vya R (tukio la mara kwa mara) utaathiriwa. Ukikumbana na matatizo, jaribu kufungua RStudio kwa kubofya aikoni kulia na kuchagua Endesha kama msimamizi. Vidokezo vingine vinaweza kupatikana katika ukurasa wa R kwenye anatoa za mtandao. Jinsi ya kusasisha R na RStudio Toleo lako la R huchapishwa kwenye R Console wakati wa kuanza. Unaweza pia kuendesha sessionInfo(). Ili kusasisha R, nenda kwenye tovuti iliyotajwa hapo juu na usakinishe upya R. Vinginevyo, unaweza kutumia kisakinishi kifurushi (kwenye Windows) kwa kuendesha kisakinishi::updateR(). Hii itafungua visanduku vya mazungumzo ili kukusaidia kupakua toleo jipya zaidi la R na kusasisha vifurushi vyako hadi toleo jipya la R. Maelezo zaidi yanaweza kupatikana katika hati za kisakinishi. Fahamu kuwa toleo la zamani la R bado litakuwepo kwenye kompyuta yako. Unaweza kuendesha kwa muda toleo la zamani (usakinishaji wa zamani) wa R kwa kubofya Tools -&gt; Global Options katika RStudio na kuchagua toleo la R. Hii inaweza kuwa muhimu ikiwa unataka kutumia kifurushi ambacho hakijasasishwa kufanya kazi kwenye toleo jipya zaidi la R. Maelezo zaidi yanaweza kupatikana hati za installr Ili kusasisha RStudio, unaweza kwenda kwenye tovuti iliyo hapo juu na upakue upya RStudio. Chaguo jingine ni kubofya Help -&gt; Check for Updates kwenye RStudio, lakini hii inaweza isionyeshe masasisho ya hivi punde zaidi. Ili kuona ni matoleo yapi ya R, RStudio, au vifurushi vilivyotumika wakati Kitabu hiki cha Mwongozo kilipotengenezwa, angalia ukurasa kwenye Maelezo ya Uhariri na kiufundi. Programu nyingine unaweza kuhitaji kusakinisha TinyTeX (ya kuunda hati ya RMarkdown kwa PDF) Pandoc (ya kuunda hati za RMarkdown) RTools (za ujenzi wa vifurushi vya R) phantomjs (kwa kuhifadhi picha tuli za mitandao ya uhuishaji, kama vile minyororo ya upokezaji) TinyTex TinyTex ni usambazaji maalum wa LaTeX, muhimu wakati wa kujaribu kutoa PDF kutoka kwa R Tazama https://yihui.org/tinytex/ kwa taarifa zaidi. Ili kusakinisha TinyTex kutoka R: install.packages(&#39;tinytex&#39;) tinytex::install_tinytex() # to uninstall TinyTeX, run tinytex::uninstall_tinytex() Pandoc Pandoc ni kigeuzi cha hati, programu tofauti kutoka kwa R. Inakuja kuunganishwa na RStudio na haipaswi kuhitaji kupakuliwa. Husaidia mchakato wa kubadilisha hati za Rmarkdown hadi umbizo kama vile .pdf na kuongeza utendakazi changamano.RTools. RTools RTools ni mkusanyiko wa programu ya ujenzi wa vifurushi vya R Sanikisha kutoka kwa tovuti hii: https://cran.r-project.org/bin/windows/Rtools/ phantomjs Hii mara nyingi hutumiwa kupiga picha za skrini za kurasa za wavuti. Kwa mfano unapotengeneza msururu wa upokezaji na kifurushi cha epicontacts, faili ya HTML inatolewa ambayo inaingiliana na inayobadilika. Ikiwa unataka taswira tuli, inaweza kuwa muhimu kutumia kifurushi cha picha ya wavuti kugeuza mchakato huu kiotomatiki. Hii itahitaji programu ya nje phantomjs. Unaweza kusakinisha phantomjs kupitia kifurushi cha webshot kwa amri webshot::install_phantomjs(). 4.5 RStudio Mwelekeo wa RStudio Kwanza, fungua RStudio. Kwa kuwa ikoni zao zinaweza kuonekana sawa, hakikisha unafungua RStudio na sio R. Ili RStudio ifanye kazi lazima pia uwe na R iliyosakinishwa kwenye kompyuta (tazama hapo juu kwa maagizo ya usakinishaji). RStudio ni kiolesura (GUI) kwa matumizi rahisi ya R. Unaweza kufikiria R kama injini ya gari, kufanya kazi muhimu, na RStudio kama mwili wa gari (pamoja na viti, vifuasi, n.k.) ambayo husaidia. kweli unatumia injini kusonga mbele! Unaweza kuona cheatsheet kamili ya kiolesura cha mtumiaji ya RStudio (PDF)hapa Kwa chaguo-msingi RStudio huonyesha paneli nne za mstatili KIDOKEZO:Ikiwa RStudio yako inaonyesha kidirisha kimoja tu cha kushoto ni kwa sababu bado huna hati zilizofunguliwa. Kidirisha Chanzo Kidirisha hiki, kwa chaguo-msingi katika sehemu ya juu kushoto, ni nafasi ya kuhariri, kuendesha, na kuhifadhi hati zako. Hati zina amri unazotaka kutekeleza. Kidirisha hiki kinaweza pia kuonyesha seti za data (fremu za data) za kutazamwa. Kwa watumiaji wa Stata, kidirisha hiki ni sawa na madirisha yako ya Faili-Faili na Kihariri cha Data.. Kidirisha cha R Console R Console, kwa chaguo-msingi kidirisha cha kushoto au cha chini kushoto katika R Studio, ndiyo nyumba ya injini ya R. Hapa ndipo amri zinaendeshwa na matokeo yasiyo ya picha na ujumbe wa hitilafu/onyo huonekana. Unaweza kuingiza na kuendesha amri moja kwa moja kwenye R Console, lakini tambua kuwa amri hizi hazijahifadhiwa jinsi zinavyofanya wakati wa kutekeleza amri kutoka kwa hati. Ikiwa unaifahamu Stata, R Console ni kama Dirisha la Amri na pia Dirisha la Matokeo.. Kidirisha cha Mazingira Kidirisha hiki, kwa chaguo-msingi katika sehemu ya juu-kulia, mara nyingi hutumika kuona muhtasari mfupi wa vitu katika Mazingira ya R katika kipindi cha sasa. Vipengee hivi vinaweza kujumuisha seti za data zilizoingizwa, zilizorekebishwa au kuundwa, vigezo ulivyofafanua (k.m. wiki maalum ya uchanganuzi), au vekta au orodha ambazo umefafanua wakati wa uchanganuzi (k.m. majina ya maeneo). Unaweza kubofya kishale karibu na jina la fremu ya data ili kuona vigeu vyake. Katika Stata, hii inafanana zaidi na dirisha la Kidhibiti cha Vigezo. Kidirisha hiki pia kina Historia ambapo unaweza kuona amri ambazo unaweza hapo awali. Pia ina kichupo cha Mafunzo ambapo unaweza kukamilisha mafunzo shirikishi ya R ikiwa umesakinisha kifurushi cha mwanafunzi. Pia ina kidirisha cha Viunganisho kwa miunganisho ya nje, na inaweza kuwa na kidirisha cha Git ukichagua kusano na Github.. Viwanja, Kitazamaji, Vifurushi na Kidirisha cha Usaidizi Kidirisha cha chini kulia kinajumuisha tabo kadhaa muhimu. Michoro ya kawaida ya mpangilio ikijumuisha ramani itaonyeshwa kwenye kidirisha cha Njama. Matokeo shirikishi au HTML yataonyeshwa kwenye kidirisha cha Kitazamaji. Kidirisha cha Usaidizi kinaweza kuonyesha hati na faili za usaidizi. Kidirisha cha Faili ni kivinjari ambacho kinaweza kutumika kufungua au kufuta faili. Kidirisha cha Vifurushi hukuruhusu kuona, kusakinisha, kusasisha, kufuta, kupakia/kupakua vifurushi vya R, na kuona ni toleo gani la kifurushi ulicho nacho. Ili kujifunza zaidi kuhusu vifurushi tazama sehemu ya vifurushi hapa chini. Kidirisha hiki kina usawa wa Stata wa madirisha ya Kidhibiti cha Viwanja na Kidhibiti cha Mradi. Mipangilio ya RStudio Badilisha mipangilio na mwonekano wa RStudio kwenye menyu kunjuzi ya Zana, kwa kuchagua Global Options. Huko unaweza kubadilisha mipangilio chaguomsingi, ikijumuisha mwonekano/rangi ya usuli.. Anzisha tena Ikiwa R yako itaganda, unaweza kuanzisha upya R kwa kwenda kwenye menyu ya Kipindi na kubofya Anzisha upya R. Hii inaepuka shida ya kufunga na kufungua RStudio. Kila kitu katika mazingira yako ya R kitaondolewa ukifanya hivi. Keyboard shortcuts Baadhi ya njia za mkato za kibodi muhimu sana ziko hapa chini. Tazama mikato yote ya kibodi ya Windows, Max, na Linux katika ukurasa wa pili wa kiolesura hiki cha RStudio. Windows/Linux Mac Kitendo Esc Esc Katisha amri ya sasa (inafaa ikiwa kwa bahati mbaya uliendesha amri isiyokamilika na huwezi kuepuka kuona + kwenye koni ya R) Ctrl+s Cmd+s Hifadhi(hati) Tab Tab Kamilisha kiotomatiki Ctrl + Enter Cmd + Enter Endesha laini za sasa/uteuzi wa msimbo Ctrl + Shift + C Cmd + Shift + c toa maoni/toa maoni kwa mistari iliyoangaziwa Alt + - Option + - Weka&lt;- Ctrl + Shift + m Cmd + Shift + m Weka %&gt;% Ctrl + l Cmd + l Futa koni ya R Ctrl + Alt + b Cmd + Option + b Endesha kutoka mwanzo hadi mstari wa sasa Ctrl + Alt + t Cmd + Option + t Endesha sehemu ya msimbo wa sasa (R Markdown) Ctrl + Alt + i Cmd + Shift + r Ingiza sehemu ya msimbo (kwenye R Markdown) Ctrl + Alt + c Cmd + Option + c Tekeleza sehemu ya msimbo wa sasa (R Markdown) up/down arrows in R console Same Geuza kupitia amri zinazoendeshwa hivi karibuni Shift + up/down arrows in script Same Chagua mistari mingi ya msimbo Ctrl + f Cmd + f Tafuta na ubadilishe katika hati ya sasa Ctrl + Shift + f Cmd + Shift + f Pata faili (tafuta / badilisha katika hati nyingi) Alt + l Cmd + Option + l Mara msimbo uliochaguliwa Shift + Alt + l Cmd + Shift + Option+l Fungua msimbo uliochaguliwa TIP:Tumia ufunguo wako wa Kichupo unapoandika ili kuhusisha utendakazi wa kukamilisha kiotomatiki wa RStudio. Hii inaweza kuzuia makosa ya tahajia. Bonyeza Tab unapoandika ili kutoa menyu kunjuzi ya vitendaji na vipengee vinavyowezekana, kulingana na ulichoandika kufikia sasa. 4.6 Kazi Kazi ndizo msingi wa kutumia R. Kazi ni jinsi unavyofanya kazi na uendeshaji. Vipengele vingi vinakuja kusakinishwa na R, nyingi zaidi zinapatikana kwa kupakuliwa kwenye vifurushi (zilizofafanuliwa katika sehemu ya vifurushi), na unaweza hata kuandika kazi zako za desturi! Sehemu hii ya msingi juu ya kazi inaelezea:  Taratibu ni nini na jinsi zinavyofanya kazi  Je, hoja za utendaji ni zipi  Jinsi ya kupata usaidizi kuelewa utendaji Ujumbe wa haraka juu ya sintaksia: Katika kitabu hiki cha mwongozo, vitendaji vimeandikwa kwa maandishi ya msimbo na mabano yaliyo wazi, kama hii: chujio(). Kama ilivyoelezewa katika sehemu ya vifurushi, utendakazi hupakuliwa ndani ya vifurushi. Katika kitabu hiki cha mwongozo, majina ya vifurushi yameandikwa kwa herufi nzito, kama vile dplyr. Wakati mwingine katika msimbo wa mfano unaweza kuona jina la kazi likiwa limeunganishwa kwa uwazi na jina la kifurushi chake na koloni mbili (::) kama hii: dplyr::filter(). Madhumuni ya uunganisho huu yamefafanuliwa katika sehemu ya vifurushi. Vitendaji Rahisi Chaguo za kukokotoa ni kama mashine inayopokea pembejeo, hufanya kitendo fulani na ingizo hizo, na kutoa pato. Pato ni nini inategemea kazi. Utendakazi kwa kawaida hufanya kazi kwenye baadhi ya kitu kilichowekwa ndani ya mabano ya chaguo za kukokotoa. Kwa mfano, chaguo za kukokotoa sqrt() hukokotoa mzizi wa mraba wa nambari. sqrt(49) ## [1] 7 Kitu kilichotolewa kwa chaguo za kukokotoa pia kinaweza kuwa safu wima katika mkusanyiko wa data (tazama sehemu ya Vipengee kwa undani juu ya aina zote za vitu). Kwa sababu R inaweza kuhifadhi hifadhidata nyingi, utahitaji kubainisha mkusanyiko wa data na safu wima. Njia moja ya kufanya hivyo ni kutumia nukuu ya $ kuunganisha jina la seti ya data na jina la safu wima (dataset$column). Katika mfano ulio hapa chini, muhtasari wa chaguo la kukokotoa () unatumika kwa umri wa safu wima ya nambari katika orodha ya mkusanyiko wa data, na matokeo ni muhtasari wa nambari za safu wima na thamani zinazokosekana. # Print summary statistics of column &#39;age&#39; in the dataset &#39;linelist&#39; summary(linelist$age) ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s ## 0.00 6.00 13.00 16.07 23.00 84.00 86 KUMBUKA: Nyuma ya pazia, chaguo la kukokotoa linawakilisha msimbo changamano wa ziada ambao umefungwa kwa mtumiaji kuwa amri moja rahisi. Hufanya kazi zenye hoja nyingi Mara nyingi utendakazi huomba pembejeo kadhaa, zinazoitwa hoja, ziko ndani ya mabano ya chaguo za kukokotoa, kwa kawaida hutenganishwa na koma.  Baadhi ya hoja zinahitajika ili chaguo la kukokotoa lifanye kazi ipasavyo, zingine ni za hiari  Hoja za hiari zina mipangilio chaguo-msingi  Hoja zinaweza kuchukua herufi, nambari, kimantiki (TRUE/FALSE), na michango mingine Hapa kuna kazi ya kubuni ya kufurahisha, inayoitwa oven_bake(), kama mfano wa utendaji wa kawaida. Huchukua kitu cha kuingiza (k.m. seti ya data, au katika mfano huu unga) na kuifanyia shughuli kama ilivyobainishwa na hoja za ziada (dakika = na halijoto =). Matokeo yanaweza kuchapishwa kwa koni, au kuhifadhiwa kama kitu kwa kutumia opereta ya kazi &lt;-. Katika mfano halisi zaidi, age_pyramid() amri hapa chini hutoa piramidi ya umri kulingana na vikundi vya umri vilivyobainishwa na safu mgawanyiko ya jozi, kama vile jinsia. Chaguo za kukokotoa hupewa hoja tatu ndani ya mabano, zikitenganishwa na koma. Thamani zinazotolewa kwa hoja zinathibitisha orodha ya mstari kama mfumo wa data wa kutumia, age_cat5 kama safu wima ya kuhesabu, na jinsia kama safu ya jozi ya kutumia kugawanya piramidi kwa rangi. # Create an age pyramid age_pyramid(data = linelist, age_group = &quot;age_cat5&quot;, split_by = &quot;gender&quot;) Amri iliyo hapo juu inaweza kuandikwa kwa usawa kama ilivyo hapo chini, kwa mtindo mrefu na mstari mpya kwa kila hoja. Mtindo huu unaweza kuwa rahisi kusoma, na rahisi kuandika maoni na # kuelezea kila sehemu (kutoa maoni kwa upana ni mazoezi mazuri!). Ili kutekeleza amri hii ndefu unaweza kuonyesha amri nzima na ubofye Run, au tu kuweka mshale wako kwenye mstari wa kwanza na kisha bonyeza Ctrl na Ingiza funguo wakati huo huo. # Create an age pyramid age_pyramid( data = linelist, # use case linelist age_group = &quot;age_cat5&quot;, # provide age group column split_by = &quot;gender&quot; # use gender column for two sides of pyramid ) Nusu ya kwanza ya mgawo wa hoja (k.m. data =) haihitaji kubainishwa ikiwa hoja zimeandikwa kwa mpangilio maalum (uliobainishwa katika hati za chaguo la kukokotoa). Msimbo ulio hapa chini hutoa piramidi sawa na hapo juu, kwa sababu chaguo la kukokotoa linatarajia mpangilio wa hoja: fremu ya data, tofauti_ya kikundi, split_by kutofautiana. # This command will produce the exact same graphic as above age_pyramid(linelist, &quot;age_cat5&quot;, &quot;gender&quot;) Amri changamano zaidi age_pyramid() inaweza kujumuisha hoja za hiari kwa: Onyesha uwiano badala ya hesabu (weka sawia = TRUE wakati chaguo-msingi ni FALSE) Bainisha rangi mbili za kutumia (pal = ni kifupi cha palette na imetolewa na vekta ya majina mawili ya rangi. Angalia ukurasa wavipengee jinsi chaguo za kukokotoa c() hutengeneza yekta.) KUMBUKA: Kwa hoja ambazo unabainisha na sehemu zote mbili za hoja (k.m. proportional = TRUE), mpangilio wao kati ya hoja zote haujalishi. age_pyramid( linelist, # use case linelist &quot;age_cat5&quot;, # age group column &quot;gender&quot;, # split by gender proportional = TRUE, # percents instead of counts pal = c(&quot;orange&quot;, &quot;purple&quot;) # colors ) Kuandika Kazi R ni lugha inayoelekezwa kwenye vitendaji, kwa hivyo unapaswa kujisikia kuwa na uwezo wa kuandika vitendaji vyako mwenyewe. Kuunda kazi huleta faida kadhaa:  Kuwezesha upangaji wa kawaida - utenganisho wa msimbo hadi vipande huru na vinavyoweza kudhibitiwa  Badilisha nakala-na-kubandika inayorudiwa, ambayo inaweza kuwa na makosa  Taja vipande vya msimbo majina ya kukumbukwa Jinsi ya kuandika chaguo la kukokotoa imefunikwa kwa kina katika ukurasa wa vitendaji vya Kuandika. Ukurasa wa Kuandika Kazi. 4.7 Vifurushi Vifurushi vina vitendaji. Kifurushi cha R ni kifurushi cha msimbo na hati zinazoweza kushirikiwa ambazo zina vitendaji vilivyobainishwa awali. Watumiaji katika jumuiya ya R hutengeneza vifurushi kila wakati vinavyoshughulikia matatizo mahususi, kuna uwezekano kwamba mtu anaweza kukusaidia katika kazi yako! Utasakinisha na kutumia mamia ya vifurushi katika matumizi yako ya R. Wakati wa usakinishaji, R ina vifurushi vya msingi na kazi zinazofanya kazi za msingi za kawaida. Lakini watumiaji wengi wa R huunda vitendaji maalum, ambavyo vinathibitishwa na jumuiya ya R na ambavyo unaweza kupakua kama kifurushi kwa matumizi yako mwenyewe. Katika kijitabu hiki, majina ya vifurushi yameandikwa kwa herufi nzito. Mojawapo ya mambo yenye changamoto zaidi ya R ni kwamba mara nyingi kuna chaguo nyingi za kukokotoa au vifurushi ili kukamilisha kazi fulani. Sanikisha na upakie Kazi zimo ndani ya vifurushi ambavyo vinaweza kupakuliwa (vimewekwa) kwenye kompyuta yako kutoka kwa mtandao. Mara kifurushi kinapopakuliwa, huhifadhiwa kwenye maktaba yako. Kisha unaweza kufikia vitendaji vilivyomo wakati wa kipindi chako cha sasa cha R kwa kupakia kifurushi. Fikiria R kama maktaba yako ya kibinafsi: Unapopakua kifurushi, maktaba yako hupata kitabu kipya cha vitendaji, lakini kila wakati unapotaka kutumia chaguo la kukokotoa katika kitabu hicho, lazima uazima (pakia) kitabu hicho kutoka kwa maktaba yako. Kwa muhtasari: kutumia kazi zinazopatikana kwenye kifurushi cha R, hatua 2 lazima zitekelezwe: 1. Mfuko lazima umewekwa (mara moja), na 2. Kifurushi lazima kipakiwe (kila kipindi cha R) Maktaba yako Maktaba yako ni folda kwenye kompyuta yako, iliyo na folda kwa kila kifurushi ambacho kimesakinishwa. Jua wapi R imewekwa kwenye kompyuta yako, na utafute folda inayoitwa win-maktaba. Kwa mfano: R\\win-library\\4.0 (4.0 ni toleo la R - utakuwa na maktaba tofauti kwa kila toleo la R ambalo umepakua). Unaweza kuchapisha njia ya faili kwenye maktaba yako kwa kuingiza .libPaths() (mabano tupu). Hii inakuwa muhimu hasa ikiwa unafanya kazi na R kwenye anatoa za mtandao. Sakinisha kutoka CRAN Mara nyingi, watumiaji wa R hupakua vifurushi kutoka kwa CRAN. CRAN (Comprehensive R Archive Network) ni ghala la mtandaoni la vifurushi vya R ambavyo vimechapishwa na wanajamii wa R.. Je, una wasiwasi kuhusu virusi na usalama unapopakua kifurushi kutoka kwa CRAN? Soma makala hii uu ya mada. Jinsi ya kufunga na kupakia Katika kitabu hiki cha mwongozo, tunapendekeza kutumia kifurushi cha pacman (kifupi cha kidhibiti kifurushi). Inatoa kazi rahisi p_load() ambayo itasakinisha kifurushi ikiwa ni lazima na kuipakia kwa matumizi katika kipindi cha sasa cha R. Syntax rahisi sana. Orodhesha tu majina ya vifurushi ndani ya p_load() mabano, yaliyotenganishwa na koma. Amri hii itasakinisha rio, tidyverse, na vifurushi hapa ikiwa bado hazijasakinishwa, na itapakia kwa matumizi. Hii inafanya p_load() mbinu kuwa rahisi na fupi ikiwa unashiriki hati na wengine. Kumbuka kuwa majina ya vifurushi ni nyeti kwa kadiri. # Install (if necessary) and load packages for use pacman::p_load(rio, tidyverse, here) Kumbuka kuwa tumetumia syntax pacman::p_load() ambayo huandika kwa uwazi jina la kifurushi (pacman) kabla ya jina la chaguo-kazi (p_load()), iliyounganishwa na koloni mbili ::. Syntax hii ni muhimu kwa sababu pia inapakia kifurushi cha pacman (ikizingatiwa kuwa tayari kimewekwa). Kuna chaguo mbadala za msingi za R ambazo utaona mara nyingi. Chaguo za msingi za R za kusakinisha kifurushi ni install.packages(). Jina la kifurushi cha kusakinisha lazima litolewe kwenye mabano katika nukuu. Ikiwa unataka kusakinisha vifurushi vingi kwa amri moja, lazima ziorodheshwe ndani ya vekta ya herufi c(). Kumbuka: amri hii husakinisha kifurushi, lakini haipakii kwa matumizi katika kipindi cha sasa. # install a single package with base R install.packages(&quot;tidyverse&quot;) # install multiple packages with base R install.packages(c(&quot;tidyverse&quot;, &quot;rio&quot;, &quot;here&quot;)) Usakinishaji unaweza pia kukamilishwa kwa kubofya-na-kubonyeza kwa kwenda kwenye kidirisha cha Vifurushi cha RStudio na kubofya Sakinisha na kutafuta jina la kifurushi unachotaka. Kazi ya msingi ya R kupakia kifurushi kwa matumizi (baada ya kusakinishwa) ni maktaba(). Inaweza kupakia kifurushi kimoja tu kwa wakati mmoja (sababu nyingine ya kutumia p_load()). Unaweza kutoa jina la kifurushi na au bila manukuu. # load packages for use, with base R library(tidyverse) library(rio) library(here) Ili kuangalia ikiwa kifurushi kimesakinishwa na/au kupakiwa, unaweza kutazama kidirisha cha Vifurushi katika RStudio. Ikiwa kifurushi kimewekwa, kinaonyeshwa hapo na nambari ya toleo. Ikiwa kisanduku chake kimeangaliwa, kinapakiwa kwa kikao cha sasa Sanikisha kutoka kwa Github Wakati mwingine, unahitaji kusakinisha kifurushi ambacho bado hakipatikani kutoka kwa CRAN. Au labda kifurushi kinapatikana kwenye CRAN lakini unataka toleo la ukuzaji lenye vipengele vipya ambavyo bado havijatolewa katika toleo thabiti zaidi lililochapishwa la CRAN. Hizi mara nyingi hupangishwa kwenye tovuti ya github.com katika msimbo wa bure, unaoangalia umma hazina. Soma zaidi kuhusu Github kwenye ukurasa wa kitabu juu ya Udhibiti wa Toleo na ushirikiano na Git na Github. Ili kupakua vifurushi vya R kutoka Github, unaweza kutumia kazi p_load_gh() kutoka pacman, ambayo itasakinisha kifurushi ikiwa ni lazima, na kukipakia kwa matumizi katika kipindi chako cha sasa cha R. Njia mbadala za kusakinisha ni pamoja na kutumia vidhibiti vya mbali au vifurushi vya devtools. Soma zaidi juu ya kazi zote za pacman kwenye hati za kifurushi. Ili kusakinisha kutoka kwa Github, lazima utoe maelezo zaidi. Lazima utoe: 1. Kitambulisho cha Github cha mmiliki wa hazina 2. Jina la hazina ambayo ina kifurushi 3. (si lazima) Jina la tawi (toleo mahususi la ukuzaji) unalotaka kupakua. Katika mifano hapa chini, neno la kwanza katika alama za nukuu ni Kitambulisho cha Github cha mmiliki wa hifadhi, baada ya kufyeka ni jina la hazina (jina la kifurushi). # install/load the epicontacts package from its Github repository p_load_gh(&quot;reconhub/epicontacts&quot;) Ikiwa ungependa kusakinisha kutoka kwa tawi (toleo) isipokuwa tawi kuu, ongeza jina la tawi baada ya @, baada ya jina la hifadhi.. # install the &quot;timeline&quot; branch of the epicontacts package from Github p_load_gh(&quot;reconhub/epicontacts@timeline&quot;) Ikiwa hakuna tofauti kati ya toleo la Github na toleo kwenye kompyuta yako, hakuna hatua itachukuliwa. Unaweza kulazimisha kusakinisha tena kwa kutumia p_load_current_gh() na sasisho la update = TRUE. Soma zaidi kuhusu pacman kwenye vignette mtandaoni. Sanikisha kutoka kwa ZIP au TAR Unaweza kusanikisha kutoka mtandaoni ukitumia tovuti: packageurl &lt;- &quot;https://cran.r-project.org/src/contrib/Archive/dsr/dsr_0.2.2.tar.gz&quot; install.packages(packageurl, repos=NULL, type=&quot;source&quot;) Au, pakua kwenye kompyuta yako katika faili iliyofungwa: Chaguo 1: kutumia install_local() kutoka kwa kifurushi cha remotes. remotes::install_local(&quot;~/Downloads/dplyr-master.zip&quot;) Chaguo la 2: kutumia install.packages() kutoka msingi R, kutoa njia ya faili kwa faili ya ZIP na mpangilio type = &quot;source and repos = NULL. install.packages(&quot;~/Downloads/dplyr-master.zip&quot;, repos=NULL, type=&quot;source&quot;) Sintaksia ya msimbo Kwa uwazi katika kitabu hiki cha mwongozo, utendakazi wakati mwingine hutanguliwa na jina la kifurushi chao kwa kutumia :: ishara kwa njia ifuatayo: package_name::function_name() Mara tu kifurushi kinapopakiwa kwa kipindi, mtindo huu wazi sio lazima. Mtu anaweza kutumia tu function_name(). Walakini kuandika jina la kifurushi ni muhimu wakati jina la kazi ni la kawaida na linaweza kuwepo katika vifurushi vingi (kwa mfano plot()). Kuandika jina la kifurushi pia kutapakia kifurushi ikiwa bado hakijapakiwa. # This command uses the package &quot;rio&quot; and its function &quot;import()&quot; to import a dataset linelist &lt;- rio::import(&quot;linelist.xlsx&quot;, which = &quot;Sheet1&quot;) Usaidizi wa Kazi Ili kusoma zaidi kuhusu chaguo za kukokotoa, unaweza kuitafuta kwenye kichupo cha Usaidizi cha RStudio ya chini kulia. Unaweza pia kutekeleza amri kama ?thefunctionname (weka jina la chaguo la kukokotoa baada ya alama ya kuuliza) na ukurasa wa Usaidizi utaonekana kwenye kidirisha cha Usaidizi. Hatimaye, jaribu kutafuta rasilimali mtandaoni. Sasisha vifurushi Unaweza kusasisha vifurushi kwa kusakinisha tena. Unaweza pia kubofya kitufe cha kijani cha Sasisha kwenye kidirisha cha Vifurushi vya RStudio ili kuona ni vifurushi vipi vina matoleo mapya ya kusakinisha. Fahamu kuwa nambari yako ya zamani inaweza kuhitaji kusasishwa ikiwa kuna marekebisho makubwa ya jinsi chaguo la kukokotoa linavyofanya kazi! Futa vifurushi Tumia p_delete() kutoka pacman, au remove.packages() kutoka msingi R. Vinginevyo, nenda utafute folda iliyo na maktaba yako na ufute folda wewe mwenyewe.. Vitegemezi Vifurushi mara nyingi hutegemea vifurushi vingine kufanya kazi. Hizi huitwa utegemezi. Ikiwa utegemezi utashindwa kusakinisha, basi kifurushi kinachotegemea kinaweza pia kushindwa kusakinisha. Tazama utegemezi wa kifurushi na p_depends(), na uone ni vifurushi vipi vinavyotegemea na p_depends_reverse() Vitendaji vilivyofichwa Sio kawaida kwamba vifurushi viwili au zaidi vina jina la utendakazi sawa. Kwa mfano, dplyr ya kifurushi ina kichungi() kazi, lakini ndivyo takwimu za kifurushi. Kichujio cha chaguo-msingi () kinategemea mpangilio wa vifurushi hivi kwa mara ya kwanza kwenye kikao cha R - cha baadaye kitakuwa chaguo-msingi kwa kichujio cha amri (). Unaweza kuangalia agizo kwenye kidirisha chako cha Mazingira cha R Studio - bofya menyu kunjuzi ya Mazingira ya Ulimwenguni na uone mpangilio wa vifurushi. Chaguo za kukokotoa kutoka kwa vifurushi vilivyo chini ya orodha hiyo kunjuzi zitaficha utendakazi wa jina moja katika vifurushi vinavyoonekana juu zaidi katika orodha kunjuzi. Wakati wa kupakia kifurushi kwanza, R itakuonya kwenye koni ikiwa masking inatokea, lakini hii inaweza kuwa rahisi kukosa. Hapa kuna njia ambazo unaweza kurekebisha masking: 1. Taja jina la kifurushi katika amri. Kwa mfano, tumia dplyr::filter() 2. Panga upya mpangilio ambao vifurushi vinapakiwa (k.m. ndani ya p_load()), na uanze kipindi kipya cha R. Ondoa/Pakua Ili kupata (kupakua) kifurushi, tumia amri hii, na jina sahihi la kifurushi na koloni moja tu. Kumbuka kwamba hii inaweza kutatua masking. detach(package:PACKAGE_NAME_HERE, unload=TRUE) Sakinisha toleo la zamani Tazama mwongozo huu ili kusakinisha toleo la zamani la kifurushi fulani. Vifurushi vilivyopendekezwa Tazama ukurasa kwenye Vifurushi vilivyopendekezwa kwa uorodheshaji wa vifurushi tunavyopendekeza kwa epidemiologia ya kila siku. 4.8 Hati Hati ni sehemu ya msingi ya upangaji programu. Ni hati zinazoshikilia amri zako (k.m. kazi za kuunda na kurekebisha seti za data, taswira za kuchapisha, n.k). Unaweza kuhifadhi hati na kuiendesha tena baadaye. Kuna faida nyingi za kuhifadhi na kuendesha amri zako kutoka kwa hati (dhidi ya kuandika amri moja baada ya nyingine kwenye mstari wa amri wa dashibodi ya R): Kubebeka - unaweza kushiriki kazi yako na wengine kwa kuwatumia hati zako Uzalishaji tena - ili wewe na wengine mjue ni nini hasa mlifanya Udhibiti wa toleo - ili uweze kufuatilia mabadiliko yaliyofanywa na wewe mwenyewe au wafanyakazi wenza Kutoa maoni/dokezo - kueleza wenzako ulichofanya Kutoa maoni Katika hati unaweza pia kufafanua (maoni) karibu na msimbo wako wa R. Kutoa maoni kunasaidia kujieleza mwenyewe na wasomaji wengine kile unachofanya. Unaweza kuongeza maoni kwa kuandika alama ya heshi (#) na kuandika maoni yako baada yake. Maandishi yaliyotolewa maoni yataonekana katika rangi tofauti na msimbo wa R. Nambari yoyote iliyoandikwa baada ya # haitaendeshwa. Kwa hivyo, kuweka # kabla ya nambari pia ni njia muhimu ya kuzuia kwa muda safu ya nambari (toa maoni) ikiwa hutaki kuifuta). Unaweza kutoa maoni/katika mistari mingi mara moja kwa kuiangazia na kubofya Ctrl+Shift+c (Cmd+Shift+c katika Mac).. # A comment can be on a line by itself # import data linelist &lt;- import(&quot;linelist_raw.xlsx&quot;) %&gt;% # a comment can also come after code # filter(age &gt; 50) # It can also be used to deactivate / remove a line of code count() Toa maoni yako juu ya kile unachofanya na kwa nini unakifanya. Vunja msimbo wako katika sehemu zenye mantiki Andanisha msimbo wako na maelezo ya hatua kwa hatua ya kile unachofanya (k.m. hatua zilizowekwa nambari) Style Ni muhimu kufahamu mtindo wako wa uandishi - haswa ikiwa unafanya kazi kwenye timu. Tunatetea mwongozo wa mtindo. Pia kuna vifurushi kama vile styler na lintr ambavyo vinakusaidia kuendana na mtindo huu. Mambo machache ya msingi sana ili kufanya msimbo wako usomeke kwa wengine: * Unapotaja vitu, tumia herufi ndogo tu, nambari, na mistari chini _, k.m. my_data * Tumia nafasi za mara kwa mara, ikijumuisha karibu na waendeshaji, k.m. n = 1 and age_new &lt;- age_old + 3 Mfano wa hati Chini ni mfano wa hati fupi ya R. Kumbuka, kadri unavyoelezea kwa ufupi nambari yako ya kuthibitisha kwenye maoni, ndivyo wenzako watakavyokupenda zaidi! Hati ya Alama ya R Hati ya alama ya R ni aina ya hati ya R ambayo hati yenyewe inakuwa hati ya pato (PDF, Neno, HTML, Powerpoint, n.k.). Hizi ni zana muhimu sana na zinazotumika mara nyingi hutumika kuunda ripoti zinazobadilika na otomatiki. Hata tovuti hii na kitabu cha mwongozo kinatolewa kwa maandishi ya alama ya R! Inafaa kumbuka kuwa watumiaji wa R wanaoanza wanaweza pia kutumia R Markdown - usiogope! Ili kupata maelezo zaidi, tazama ukurasa wa kitabu kwenye hati za RipotizilizonaRMarkdown. Madaftari ya R Hakuna tofauti kati ya kuandika kwenye Rmarkdown dhidi ya daftari la R. Hata hivyo utekelezaji wa hati unatofautiana kidogo. Tazama tovuti hii kwa maelezo zaidi. Inangaa Programu/tovuti zinazongaa zimo ndani ya hati moja, ambayo lazima iitwe app.R. Faili hii ina vipengele vitatu: 1. Kiolesura cha mtumiaji (ui) 2. Kazi ya seva 3. Wito kwa kazi ya shinyApp Tazama ukurasa wa kitabu kwenye Dashibodi zenye Shiny, au mafunzo haya ya mtandaoni: Mafunzo ya kungaa. Katika nyakati za zamani, faili iliyo hapo juu iligawanywa katika faili mbili (ui.R na server.R) Kukunja msimbo Unaweza kukunja sehemu za msimbo ili kurahisisha kusoma hati yako Ili kufanya hivyo, unda kichwa cha maandishi na #, andika kichwa chako, na ufuate kwa angalau 4 ya deshi (-), heshi (#) au sawa (=). Unapofanya hivyo, mshale mdogo utaonekana kwenye gutter upande wa kushoto (kwa nambari ya safu). Unaweza kubofya mshale huu na msimbo ulio hapa chini hadi kichwa kifuatacho kikunje na ikoni ya mishale miwili itaonekana mahali pake. Ili kupanua msimbo, ama ubofye mshale kwenye gutter tena, au ikoni ya mishale miwili. Pia kuna mikato ya kibodi kama ilivyoelezewa katika sehemu ya RStudioya ukuraha huu. Kwa kuunda vichwa na #, pia utawasha Jedwali la Yaliyomo chini ya hati yako (tazama hapa chini) ambayo unaweza kutumia kuelekeza hati yako. Unaweza kuunda vichwa vidogo kwa kuongeza alama # zaidi, kwa mfano # za msingi, ## za upili, na ### kwa vichwa vya elimu ya juu. Chini ni matoleo mawili ya hati ya mfano. Upande wa kushoto ni asili na vichwa vya maoni. Upande wa kulia, vistari vinne vimeandikwa baada ya kila kichwa, na hivyo kuzifanya kukunjwa. Mbili kati yao zimeporomoka, na unaweza kuona kwamba Jedwali la Yaliyomo chini sasa linaonyesha kila sehemu. Maeneo mengine ya msimbo ambayo yanastahiki kiotomatiki kukunjwa ni pamoja na maeneo yaliyounganishwa yenye mabano { } kama vile ufafanuzi wa utendakazi au vizuizi vyenye masharti (ikiwa sivyo, taarifa). Unaweza kusoma zaidi kuhusu kukunja msimbo kwenye tovuti ya RStudio. 4.9 Saraka ya kufanya kazi Saraka ya kufanya kazi ni eneo la folda ya mizizi inayotumiwa na R kwa kazi yako - ambapo R hutafuta na kuhifadhi faili kwa chaguo-msingi. Kwa chaguomsingi, itahifadhi faili na matokeo mapya kwenye eneo hili, na itatafuta faili za kuagiza (k.m. seti za data) hapa pia. Saraka ya kufanya kazi inaonekana katika maandishi ya kijivu juu ya kidirisha cha RStudio Console. Unaweza pia kuchapisha saraka ya sasa ya kufanya kazi kwa kukimbia getwd() (acha mabano tupu).. Mbinu iliyopendekezwa Tazama ukurasa kwenye miradiyaR kwa maelezo juu ya mbinu yetu inayopendekezwa ya kudhibiti saraka yako ya kufanya kazi. Njia ya kawaida, bora, na isiyo na shida ya kudhibiti saraka yako ya kufanya kazi na njia za faili ni kuchanganya vitu hivi 3 katika mtiririko wa kazi unaoelekezwa kwa mradi wa R: 1. Mradi wa R wa kuhifadhi faili zako zote (tazama ukurasa kwenye miradi ya R) 2. Kifurushi hapa cha kupata faili (tazama ukurasa kwenye Ingiza na Hamisha) 3. Kifurushi cha rio cha kuagiza/kusafirisha nje faili (tazama ukurasa wa Kuingiza na kuuza nje) Imewekwa kwa amri Hadi hivi majuzi, watu wengi wanaojifunza R walifundishwa kuanza maandishi yao na setwd() amri. Tafadhali zingatia kutumia mtiririko wa kazi unaoelekezwa kwa mradi wa R na usome sababu za kutotumia setwd(). Kwa ufupi, kazi yako inakuwa mahususi kwa kompyuta yako, njia za faili zinazotumiwa kuleta na kuhamisha faili huwa dhaifu, na hii inazuia kwa kiasi kikubwa ushirikiano na matumizi ya msimbo wako kwenye kompyuta nyingine yoyote. Kuna njia mbadala rahisi! Kama ilivyoonyeshwa hapo juu, ingawa hatupendekezi njia hii katika hali nyingi, unaweza kutumia amri setwd() na njia ya faili ya folda inayotaka katika nukuu, kwa mfano: setwd(&quot;C:/Documents/R Files/My analysis&quot;) HATARI: Kuweka saraka ya kufanya kazi na setwd() inaweza kuwa brittle ikiwa ni maalum kwa kompyuta moja. Badala yake, tumia njia za faili zinazohusiana na saraja ya mizizi ya Miradi ya R( na kifurushi hapa). Weka kwa mikono Ili kuweka saraka ya kufanya kazi mwenyewe (hakika-na-bofya sawa na setwd()), bofya menyu kunjuzi ya Kipindi na uende kwenye Weka Orodha ya Kufanya Kazi na kisha Chagua Saraka. Hii itaweka saraka ya kufanya kazi kwa kikao hicho maalum cha R. Kumbuka: ukitumia mbinu hii, itabidi ufanye hivi kwa mikono kila wakati unapofungua RStudio.. Ndani ya mradi wa R Ikiwa unatumia mradi wa R, saraka ya kufanya kazi itakuwa chaguomsingi kwa folda ya msingi ya mradi wa R ambayo ina faili ya .rproj. Hii itatumika ukifungua RStudio kwa kubofya fungua Mradi wa R (faili iliyo na kiendelezi cha .rproj).. Saraka ya kufanya kazi katika alama ya R Katika hati ya alama ya R, saraka ya chaguo-msingi ya kufanya kazi ni folda ambayo faili ya Rmarkdown (.Rmd) imehifadhiwa ndani. Ikiwa unatumia mradi wa R na hapa kifurushi, hii haitumiki na saraka ya kufanya kazi itakuwa hapa() kama ilivyoelezewa kwenye ukurasa wa miradi ya R. Ikiwa unataka kubadilisha saraka ya kufanya kazi ya alama ya R ya kusimama pekee (sio katika mradi wa R), ikiwa unatumia setwd() hii itatumika tu kwa chunk hiyo maalum ya nambari. Ili kufanya mabadiliko ya vijisehemu vyote vya msimbo katika alama ya R, hariri sehemu ya usanidi ili kuongeza root.dir = parameta, kama vile hapa chini:: knitr::opts_knit$set(root.dir = &#39;desired/directorypath&#39;) Ni rahisi zaidi kutumia alama ya R ndani ya mradi wa R na kutumia hapa kifurushi. Kutoa njia za faili Labda chanzo cha kawaida cha kufadhaika kwa mwanzilishi wa R (angalau kwenye mashine ya Windows) ni kuandika kwenye njia ya faili ili kuagiza au kusafirisha data. Kuna maelezo kamili ya jinsi ya kuweka njia bora za faili katika ukurasa wa Kuingiza na kuuza nje, lakini hapa kuna mambo machache muhimu: Njia zilizovunjika Chini ni mfano wa njia ya faili kabisa au anwani kamili. Hizi zinaweza kuvunjika ikiwa zitatumiwa na kompyuta nyingine. Isipokuwa moja ni ikiwa unatumia hifadhi ya pamoja/mtandao. C:/Users/Name/Document/Analytic Software/R/Projects/Analysis2019/data/March2019.csv Mwelekeo wa kufyeka Ikiwa unaandika kwenye njia ya faili, fahamu mwelekeo wa mikwaju. Tumia mikwaju ya mbele (/) kutenganisha vipengele (data/provincial.csv). Kwa watumiaji wa Windows, njia chaguo-msingi ambayo njia za faili zinaonyeshwa ni kwa mikwaju ya nyuma (\\) - kwa hivyo utahitaji kubadilisha mwelekeo wa kila kufyeka. Ikiwa unatumia hapa kifurushi kama ilivyoelezewa kwenye ukurasa wa miradi ya R mwelekeo wa kufyeka sio suala. Njia za faili za jamaa Kwa ujumla tunapendekeza kutoa njia za faili jamaa badala yake - yaani, njia inayohusiana na mzizi wa Mradi wako wa R. Unaweza kufanya hivyo kwa kutumia hapa kifurushi kama ilivyoelezewa kwenye ukurasa wa miradi ya R. Njia ya faili ya jamaa inaweza kuonekana kama hii: # Import csv linelist from the data/linelist/clean/ sub-folders of an R project linelist &lt;- import(here(&quot;data&quot;, &quot;clean&quot;, &quot;linelists&quot;, &quot;marin_country.csv&quot;)) Hata ikiwa unatumia njia za faili za jamaa ndani ya mradi wa R, bado unaweza kutumia njia kamili kuagiza/kusafirisha data nje ya mradi wako wa R. 4.10 Vitu Kila kitu katika R ni kitu, na R ni lugha inayoelekezwa kwa kitu. Sehemu hizi zitafafanua:  Jinsi ya kuunda vitu (&lt;-)  Aina za vitu (k.m. fremu za data, vekta..)  Jinsi ya kufikia sehemu ndogo za vitu (k.m. vigeuzo katika mkusanyiko wa data)  Aina za vitu (k.m. nambari, mantiki, nambari kamili, mbili, herufi, kipengele) Kila kitu ni kitu Sehemu hii imechukuliwa kutoka kwa mradi wa R4Epis Kila kitu unachohifadhi katika R - seti za data, vigezo, orodha ya majina ya vijiji, jumla ya idadi ya watu, hata matokeo kama vile grafu - ni vitu ambavyo vimepewa jina na vinaweza kurejelewa katika amri za baadaye. Kitu kinapatikana wakati umekikabidhi thamani (tazama sehemu ya kazi hapa chini). Inapopewa dhamana, kitu huonekana kwenye Mazingira (tazama kidirisha cha juu cha kulia cha RStudio). Kisha inaweza kuendeshwa, kubadilishwa, kubadilishwa na kufafanuliwa upya.. Kufafanua vitu (&lt;-) Unda vitu kwa kuvipa thamani na operator &lt;- Unaweza kufikiria opereta wa kazi &lt;- kama maneno yamefafanuliwa kama. Amri za mgawo kwa ujumla hufuata agizo la kawaida: jina_la_kitu &lt;- thamani (au mchakato/hesabu ambayo hutoa thamani) Kwa mfano, unaweza kutaka kurekodi wiki ya sasa ya kuripoti magonjwa kama kitu cha kurejelea katika msimbo wa baadaye. Katika mfano huu, kitu current_week huundwa wakati kimepewa thamani 2018-W10 (alama za nukuu hufanya hii kuwa thamani ya mhusika). Kitu current_week kitaonekana kwenye kidirisha cha Mazingira cha RStudio (juu-kulia) na kinaweza kurejelewa katika amri za baadaye. Tazama amri za R na matokeo yao kwenye visanduku vilivyo hapa chini. current_week &lt;- &quot;2018-W10&quot; # this command creates the object current_week by assigning it a value current_week # this command prints the current value of current_week object in the console ## [1] &quot;2018-W10&quot; KUMBUKA: Kumbuka [1] katika pato la koni ya R inaonyesha tu kuwa unatazama kipengee cha kwanza cha matokeo. TAHADHARI: Thamani ya kitu inaweza kuandikwa zaidi wakati wowote kwa kutekeleza amri ya mgawo ili jkufafanua tena thamani yake. Hivyo, utaratibu wa amri kukimbia ni muhimu sana. Amri ifuatayo itafafanua tena thamani ya current_week: current_week &lt;- &quot;2018-W51&quot; # assigns a NEW value to the object current_week current_week # prints the current value of current_week in the console ## [1] &quot;2018-W51&quot; Ishara sawa = Pia utaona ishara sawa katika nambari ya R: Ishara ya usawa maradufu == kati ya vitu viwili au thamani inauliza swali la kimantiki: hii ni sawa na ile?. Pia utaona ishara sawa ndani ya vitendakazi vinavyotumiwa kubainisha thamani za hoja za chaguo za kukokotoa (soma kuhusu hizi katika sehemu zilizo hapa chini), kwa mfano max(age, na.rm = TRUE). Unaweza kutumia ishara moja ya usawa = badala ya &lt;- kuunda na kufafanua vitu, lakini hii imekatishwa tamaa. Unaweza kusoma kuhusu kwa nini hii inakatishwa tamaa hapa. Seti za data Seti za data pia ni vitu (kawaida fremu za data) na lazima zipewe majina zinapoingizwa. Katika msimbo ulio hapa chini, orodha ya kitu imeundwa na kupewa thamani ya faili ya CSV iliyoingizwa na kifurushi cha rio na kitendakazi chake cha import().. # linelist is created and assigned the value of the imported CSV file linelist &lt;- import(&quot;my_linelist.csv&quot;) Unaweza kusoma zaidi kuhusu kuagiza na kuhamisha hifadhidata kwa sehemu ya Leta na Hamisha. TAHADHARI: Dokezo la haraka kuhusu kutaja vitu: Majina ya vitu lazima yasiwe na nafasi, lakini unapaswa kutumia mstari chini (_) au kipindi (.) badala ya nafasi. Majina ya vitu ni nyeti kwa kadiri (ikimaanisha kuwa Dataset_A ni tofauti na seti_A). Majina ya vitu lazima yaanze na herufi (haiwezi kuanza na nambari kama 1, 2 au 3).. Matokeo Matokeo kama vile majedwali na viwanja hutoa mfano wa jinsi matokeo yanaweza kuhifadhiwa kama vitu, au kuchapishwa tu bila kuhifadhiwa. Ujumlisho mtambuka wa jinsia na matokeo kwa kutumia jedwali la msingi la kukokotoa la R linaweza kuchapishwa moja kwa moja kwenye dashibodi ya R (bila kuhifadhiwa).. # printed to R console only table(linelist$gender, linelist$outcome) ## ## Death Recover ## f 1227 953 ## m 1228 950 Lakini jedwali sawa linaweza kuhifadhiwa kama kitu kilichopewa jina. Kisha, kwa hiari, inaweza kuchapishwa. # save gen_out_table &lt;- table(linelist$gender, linelist$outcome) # print gen_out_table ## ## Death Recover ## f 1227 953 ## m 1228 950 Columns Columns in a dataset are also objects and can be defined, over-written, and created as described below in the section on Columns. You can use the assignment operator from base R to create a new column. Below, the new column bmi (Body Mass Index) is created, and for each row the new value is result of a mathematical operation on the rows value in the wt_kg and ht_cm columns. # create new &quot;bmi&quot; column using base R syntax linelist$bmi &lt;- linelist$wt_kg / (linelist$ht_cm/100)^2 However, in this handbook, we emphasize a different approach to defining columns, which uses the function mutate() from the dplyr package and piping with the pipe operator (%&gt;%). The syntax is easier to read and there are other advantages explained in the page on Cleaningdataandcorefunctions. You can read more about piping in the Piping section below. # create new &quot;bmi&quot; column using dplyr syntax linelist &lt;- linelist %&gt;% mutate(bmi = wt_kg / (ht_cm/100)^2) Object structure Objects can be a single piece of data (e.g. my_number &lt;- 24), or they can consist of structured data. The graphic below is borrowed from this online R tutorial. It shows some common data structures and their names. Not included in this image is spatial data, which is discussed in the GISbasics page. In epidemiology (and particularly field epidemiology), you will most commonly encounter data frames and vectors: Common structure Explanation Example Vectors A container for a sequence of singular objects, all of the same class (e.g. numeric, character). Variables (columns) in data frames are vectors (e.g. the column age_years). Data Frames Vectors (e.g. columns) that are bound together that all have the same number of rows. linelist is a data frame. Note that to create a vector that stands alone (is not part of a data frame) the function c() is used to combine the different elements. For example, if creating a vector of colors plots color scale: vector_of_colors &lt;- c(&quot;blue&quot;, &quot;red2&quot;, &quot;orange&quot;, &quot;grey&quot;) Object classes All the objects stored in R have a class which tells R how to handle the object. There are many possible classes, but common ones include: Class Explanation Examples Character These are text/words/sentences within quotation marks. Math cannot be done on these objects. Character objects are in quotation marks Integer Numbers that are whole only (no decimals) -5, 14, or 2000 Numeric These are numbers and can include decimals. If within quotation marks they will be considered character class. 23.1 or 14 Factor These are vectors that have a specified order or hierarchy of values An variable of economic status with ordered values Date Once R is told that certain data are Dates, these data can be manipulated and displayed in special ways. See the page on Workingwithdates for more information. 2018-04-12 or 15/3/1954 or Wed 4 Jan 1980 Logical Values must be one of the two special values TRUE or FALSE (note these are not TRUE and FALSE in quotation marks) TRUE or FALSE data.frame A data frame is how R stores a typical dataset. It consists of vectors (columns) of data bound together, that all have the same number of observations (rows). The example AJS dataset named linelist_raw contains 68 variables with 300 observations (rows) each. tibble tibbles are a variation on data frame, the main operational difference being that they print more nicely to the console (display first 10 rows and only columns that fit on the screen) Any data frame, list, or matrix can be converted to a tibble with as_tibble() list A list is like vector, but holds other objects that can be other different classes A list could hold a single number, and a dataframe, and a vector, and even another list within it! You can test the class of an object by providing its name to the function class(). Note: you can reference a specific column within a dataset using the $ notation to separate the name of the dataset and the name of the column. class(linelist) # class should be a data frame or tibble ## [1] &quot;data.frame&quot; class(linelist$age) # class should be numeric ## [1] &quot;numeric&quot; class(linelist$gender) # class should be character ## [1] &quot;character&quot; Sometimes, a column will be converted to a different class automatically by R. Watch out for this! For example, if you have a vector or column of numbers, but a character value is inserted the entire column will change to class character. num_vector &lt;- c(1,2,3,4,5) # define vector as all numbers class(num_vector) # vector is numeric class ## [1] &quot;numeric&quot; num_vector[3] &lt;- &quot;three&quot; # convert the third element to a character class(num_vector) # vector is now character class ## [1] &quot;character&quot; One common example of this is when manipulating a data frame in order to print a table - if you make a total row and try to paste/glue together percents in the same cell as numbers (e.g. 23 (40%)), the entire numeric column above will convert to character and can no longer be used for mathematical calculations.Sometimes, you will need to convert objects or columns to another class. Function Action as.character() Converts to character class as.numeric() Converts to numeric class as.integer() Converts to integer class as.Date() Converts to Date class - Note: see section on dates for details factor() Converts to factor - Note: re-defining order of value levels requires extra arguments Likewise, there are base R functions to check whether an object IS of a specific class, such as is.numeric(), is.character(), is.double(), is.factor(), is.integer() Here is more online material on classes and data structures in R. Columns/Variables ($) A column in a data frame is technically a vector (see table above) - a series of values that must all be the same class (either character, numeric, logical, etc). A vector can exist independent of a data frame, for example a vector of column names that you want to include as explanatory variables in a model. To create a stand alone vector, use the c() function as below: # define the stand-alone vector of character values explanatory_vars &lt;- c(&quot;gender&quot;, &quot;fever&quot;, &quot;chills&quot;, &quot;cough&quot;, &quot;aches&quot;, &quot;vomit&quot;) # print the values in this named vector explanatory_vars ## [1] &quot;gender&quot; &quot;fever&quot; &quot;chills&quot; &quot;cough&quot; &quot;aches&quot; &quot;vomit&quot; Columns in a data frame are also vectors and can be called, referenced, extracted, or created using the $ symbol. The $ symbol connects the name of the column to the name of its data frame. In this handbook, we try to use the word column instead of variable. # Retrieve the length of the vector age_years length(linelist$age) # (age is a column in the linelist data frame) By typing the name of the dataframe followed by $ you will also see a drop-down menu of all columns in the data frame. You can scroll through them using your arrow key, select one with your Enter key, and avoid spelling mistakes! ADVANCED TIP: Some more complex objects (e.g. a list, or an epicontacts object) may have multiple levels which can be accessed through multiple dollar signs. For example epicontacts$linelist$date_onset Access/index with brackets ([ ]) You may need to view parts of objects, also called indexing, which is often done using the square brackets [ ]. Using $ on a dataframe to access a column is also a type of indexing. my_vector &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;) # define the vector my_vector[5] # print the 5th element ## [1] &quot;e&quot; Square brackets also work to return specific parts of an returned output, such as the output of a summary() function: # All of the summary summary(linelist$age) ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s ## 0.00 6.00 13.00 16.07 23.00 84.00 86 # Just the second element of the summary, with name (using only single brackets) summary(linelist$age)[2] ## 1st Qu. ## 6 # Just the second element, without name (using double brackets) summary(linelist$age)[[2]] ## [1] 6 # Extract an element by name, without showing the name summary(linelist$age)[[&quot;Median&quot;]] ## [1] 13 Brackets also work on data frames to view specific rows and columns. You can do this using the syntax dataframe[rows, columns]: # View a specific row (2) from dataset, with all columns (don&#39;t forget the comma!) linelist[2,] # View all rows, but just one column linelist[, &quot;date_onset&quot;] # View values from row 2 and columns 5 through 10 linelist[2, 5:10] # View values from row 2 and columns 5 through 10 and 18 linelist[2, c(5:10, 18)] # View rows 2 through 20, and specific columns linelist[2:20, c(&quot;date_onset&quot;, &quot;outcome&quot;, &quot;age&quot;)] # View rows and columns based on criteria # *** Note the dataframe must still be named in the criteria! linelist[linelist$age &gt; 25 , c(&quot;date_onset&quot;, &quot;outcome&quot;, &quot;age&quot;)] # Use View() to see the outputs in the RStudio Viewer pane (easier to read) # *** Note the capital &quot;V&quot; in View() function View(linelist[2:20, &quot;date_onset&quot;]) # Save as a new object new_table &lt;- linelist[2:20, c(&quot;date_onset&quot;)] Note that you can also achieve the above row/column indexing on data frames and tibbles using dplyr syntax (functions filter() for rows, and select() for columns). Read more about these core functions in the Cleaningdataandcorefunctions page. To filter based on row number, you can use the dplyr function row_number() with open parentheses as part of a logical filtering statement. Often you will use the %in% operator and a range of numbers as part of that logical statement, as shown below. To see the first N rows, you can also use the special dplyr function head(). # View first 100 rows linelist %&gt;% head(100) # Show row 5 only linelist %&gt;% filter(row_number() == 5) # View rows 2 through 20, and three specific columns (note no quotes necessary on column names) linelist %&gt;% filter(row_number() %in% 2:20) %&gt;% select(date_onset, outcome, age) When indexing an object of class list, single brackets always return with class list, even if only a single object is returned. Double brackets, however, can be used to access a single element and return a different class than list. Brackets can also be written after one another, as demonstrated below. This visual explanation of lists indexing, with pepper shakers is humorous and helpful. # define demo list my_list &lt;- list( # First element in the list is a character vector hospitals = c(&quot;Central&quot;, &quot;Empire&quot;, &quot;Santa Anna&quot;), # second element in the list is a data frame of addresses addresses = data.frame( street = c(&quot;145 Medical Way&quot;, &quot;1048 Brown Ave&quot;, &quot;999 El Camino&quot;), city = c(&quot;Andover&quot;, &quot;Hamilton&quot;, &quot;El Paso&quot;) ) ) Here is how the list looks when printed to the console. See how there are two named elements: hospitals, a character vector addresses, a data frame of addresses my_list ## $hospitals ## [1] &quot;Central&quot; &quot;Empire&quot; &quot;Santa Anna&quot; ## ## $addresses ## street city ## 1 145 Medical Way Andover ## 2 1048 Brown Ave Hamilton ## 3 999 El Camino El Paso Now we extract, using various methods: my_list[1] # this returns the element in class &quot;list&quot; - the element name is still displayed ## $hospitals ## [1] &quot;Central&quot; &quot;Empire&quot; &quot;Santa Anna&quot; my_list[[1]] # this returns only the (unnamed) character vector ## [1] &quot;Central&quot; &quot;Empire&quot; &quot;Santa Anna&quot; my_list[[&quot;hospitals&quot;]] # you can also index by name of the list element ## [1] &quot;Central&quot; &quot;Empire&quot; &quot;Santa Anna&quot; my_list[[1]][3] # this returns the third element of the &quot;hospitals&quot; character vector ## [1] &quot;Santa Anna&quot; my_list[[2]][1] # This returns the first column (&quot;street&quot;) of the address data frame ## street ## 1 145 Medical Way ## 2 1048 Brown Ave ## 3 999 El Camino Remove objects You can remove individual objects from your R environment by putting the name in the rm() function (no quote marks): rm(object_name) You can remove all objects (clear your workspace) by running: rm(list = ls(all = TRUE)) 4.11 Piping (%&gt;%) Two general approaches to working with objects are: Pipes/tidyverse - pipes send an object from function to function - emphasis is on the action, not the object Define intermediate objects - an object is re-defined again and again - emphasis is on the object Pipes Simply explained, the pipe operator (%&gt;%) passes an intermediate output from one function to the next. You can think of it as saying then. Many functions can be linked together with %&gt;%. Piping emphasizes a sequence of actions, not the object the actions are being performed on Pipes are best when a sequence of actions must be performed on one object Pipes come from the package magrittr, which is automatically included in packages dplyr and tidyverse Pipes can make code more clean and easier to read, more intuitive Read more on this approach in the tidyverse style guide Here is a fake example for comparison, using fictional functions to bake a cake. First, the pipe method: # A fake example of how to bake a cake using piping syntax cake &lt;- flour %&gt;% # to define cake, start with flour, and then... add(eggs) %&gt;% # add eggs add(oil) %&gt;% # add oil add(water) %&gt;% # add water mix_together( # mix together utensil = spoon, minutes = 2) %&gt;% bake(degrees = 350, # bake system = &quot;fahrenheit&quot;, minutes = 35) %&gt;% let_cool() # let it cool down Here is another link describing the utility of pipes. Piping is not a base function. To use piping, the magrittr package must be installed and loaded (this is typically done by loading tidyverse or dplyr package which include it). You can read more about piping in the magrittr documentation. Note that just like other R commands, pipes can be used to just display the result, or to save/re-save an object, depending on whether the assignment operator &lt;- is involved. See both below: # Create or overwrite object, defining as aggregate counts by age category (not printed) linelist_summary &lt;- linelist %&gt;% count(age_cat) # Print the table of counts in the console, but don&#39;t save it linelist %&gt;% count(age_cat) ## age_cat n ## 1 0-4 1095 ## 2 5-9 1095 ## 3 10-14 941 ## 4 15-19 743 ## 5 20-29 1073 ## 6 30-49 754 ## 7 50-69 95 ## 8 70+ 6 ## 9 &lt;NA&gt; 86 %&lt;&gt;% This is an assignment pipe from the magrittr package, which pipes an object forward and also re-defines the object. It must be the first pipe operator in the chain. It is shorthand. The below two commands are equivalent: linelist &lt;- linelist %&gt;% filter(age &gt; 50) linelist %&lt;&gt;% filter(age &gt; 50) Define intermediate objects This approach to changing objects/dataframes may be better if: You need to manipulate multiple objects There are intermediate steps that are meaningful and deserve separate object names Risks: Creating new objects for each step means creating lots of objects. If you use the wrong one you might not realize it! Naming all the objects can be confusing Errors may not be easily detectable Either name each intermediate object, or overwrite the original, or combine all the functions together. All come with their own risks. Below is the same fake cake example as above, but using this style: # a fake example of how to bake a cake using this method (defining intermediate objects) batter_1 &lt;- left_join(flour, eggs) batter_2 &lt;- left_join(batter_1, oil) batter_3 &lt;- left_join(batter_2, water) batter_4 &lt;- mix_together(object = batter_3, utensil = spoon, minutes = 2) cake &lt;- bake(batter_4, degrees = 350, system = &quot;fahrenheit&quot;, minutes = 35) cake &lt;- let_cool(cake) Combine all functions together - this is difficult to read: # an example of combining/nesting mutliple functions together - difficult to read cake &lt;- let_cool(bake(mix_together(batter_3, utensil = spoon, minutes = 2), degrees = 350, system = &quot;fahrenheit&quot;, minutes = 35)) 4.12 Key operators and functions This section details operators in R, such as: Definitional operators Relational operators (less than, equal too..) Logical operators (and, or) Handling missing values Mathematical operators and functions (+/-, &gt;, sum(), median(), ) The %in% operator Assignment operators &lt;- The basic assignment operator in R is &lt;-. Such that object_name &lt;- value. This assignment operator can also be written as =. We advise use of &lt;- for general R use. We also advise surrounding such operators with spaces, for readability. &lt;&lt;- If Kuandika Kazi, or using R in an interactive way with sourced scripts, then you may need to use this assignment operator &lt;&lt;- (from base R). This operator is used to define an object in a higher parent R Environment. See this online reference. %&lt;&gt;% This is an assignment pipe from the magrittr package, which pipes an object forward and also re-defines the object. It must be the first pipe operator in the chain. It is shorthand, as shown below in two equivalent examples: linelist &lt;- linelist %&gt;% mutate(age_months = age_years * 12) The above is equivalent to the below: linelist %&lt;&gt;% mutate(age_months = age_years * 12) %&lt;+% This is used to add data to phylogenetic trees with the ggtree package. See the page on Phylogenetictrees or this online resource book. Relational and logical operators Relational operators compare values and are often used when defining new variables and subsets of datasets. Here are the common relational operators in R: Meaning Operator Example Example Result Equal to == &quot;A&quot; == &quot;a&quot; FALSE (because R is case sensitive) Note that == (double equals) is different from = (single equals), which acts like the assignment operator &lt;- Not equal to != 2 != 0 TRUE Greater than &gt; 4 &gt; 2 TRUE Less than &lt; 4 &lt; 2 FALSE Greater than or equal to &gt;= 6 &gt;= 4 TRUE Less than or equal to &lt;= 6 &lt;= 4 FALSE Value is missing is.na() is.na(7) FALSE (see page on Missingdata) Value is not missing !is.na() !is.na(7) TRUE Logical operators, such as AND and OR, are often used to connect relational operators and create more complicated criteria. Complex statements might require parentheses ( ) for grouping and order of application. Meaning Operator AND &amp; OR | (vertical bar) Parentheses ( ) Used to group criteria together and clarify order of operations For example, below, we have a linelist with two variables we want to use to create our case definition, hep_e_rdt, a test result and other_cases_in_hh, which will tell us if there are other cases in the household. The command below uses the function case_when() to create the new variable case_def such that: linelist_cleaned &lt;- linelist %&gt;% mutate(case_def = case_when( is.na(rdt_result) &amp; is.na(other_case_in_home) ~ NA_character_, rdt_result == &quot;Positive&quot; ~ &quot;Confirmed&quot;, rdt_result != &quot;Positive&quot; &amp; other_cases_in_home == &quot;Yes&quot; ~ &quot;Probable&quot;, TRUE ~ &quot;Suspected&quot; )) Criteria in example above Resulting value in new variable case_def If the value for variables rdt_result and other_cases_in_home are missing NA (missing) If the value in rdt_result is Positive Confirmed If the value in rdt_result is NOT Positive AND the value in other_cases_in_home is Yes Probable If one of the above criteria are not met Suspected Note that R is case-sensitive, so Positive is different than positive Missing values In R, missing values are represented by the special value NA (a reserved value) (capital letters N and A - not in quotation marks). If you import data that records missing data in another way (e.g. 99, Missing, or .), you may want to re-code those values to NA. How to do this is addressed in the Importandexport page. To test whether a value is NA, use the special function is.na(), which returns TRUE or FALSE. rdt_result &lt;- c(&quot;Positive&quot;, &quot;Suspected&quot;, &quot;Positive&quot;, NA) # two positive cases, one suspected, and one unknown is.na(rdt_result) # Tests whether the value of rdt_result is NA ## [1] FALSE FALSE FALSE TRUE Read more about missing, infinite, NULL, and impossible values in the page on Missingdata. Learn how to convert missing values when importing data in the page on Importandexport. Mathematics and statistics All the operators and functions in this page are automatically available using base R. Mathematical operators These are often used to perform addition, division, to create new columns, etc. Below are common mathematical operators in R. Whether you put spaces around the operators is not important. Purpose Example in R addition 2 + 3 subtraction 2 - 3 multiplication 2 * 3 division 30 / 5 exponent 2^3 order of operations ( ) Mathematical functions Purpose Function rounding round(x, digits = n) rounding janitor::round_half_up(x, digits = n) ceiling (round up) ceiling(x) floor (round down) floor(x) absolute value abs(x) square root sqrt(x) exponent exponent(x) natural logarithm log(x) log base 10 log10(x) log base 2 log2(x) Note: for round() the digits = specifies the number of decimal placed. Use signif() to round to a number of significant figures. Scientific notation The likelihood of scientific notation being used depends on the value of the scipen option. From the documentation of ?options: scipen is a penalty to be applied when deciding to print numeric values in fixed or exponential notation. Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than scipen digits wider. If it is set to a low number (e.g. 0) it will be turned on always. To turn off scientific notation in your R session, set it to a very high number, for example: # turn off scientific notation options(scipen=999) Rounding DANGER: round() uses bankers rounding which rounds up from a .5 only if the upper number is even. Use round_half_up() from janitor to consistently round halves up to the nearest whole number. See this explanation # use the appropriate rounding function for your work round(c(2.5, 3.5)) ## [1] 2 4 janitor::round_half_up(c(2.5, 3.5)) ## [1] 3 4 Statistical functions CAUTION: The functions below will by default include missing values in calculations. Missing values will result in an output of NA, unless the argument na.rm = TRUE is specified. This can be written shorthand as na.rm = T. Objective Function mean (average) mean(x, na.rm=T) median median(x, na.rm=T) standard deviation sd(x, na.rm=T) quantiles* quantile(x, probs) sum sum(x, na.rm=T) minimum value min(x, na.rm=T) maximum value max(x, na.rm=T) range of numeric values range(x, na.rm=T) summary** summary(x) Notes: *quantile(): x is the numeric vector to examine, and probs = is a numeric vector with probabilities within 0 and 1.0, e.g c(0.5, 0.8, 0.85) **summary(): gives a summary on a numeric vector including mean, median, and common percentiles DANGER: If providing a vector of numbers to one of the above functions, be sure to wrap the numbers within c() . # If supplying raw numbers to a function, wrap them in c() mean(1, 6, 12, 10, 5, 0) # !!! INCORRECT !!! ## [1] 1 mean(c(1, 6, 12, 10, 5, 0)) # CORRECT ## [1] 5.666667 Other useful functions Objective Function Example create a sequence seq(from, to, by) seq(1, 10, 2) repeat x, n times rep(x, ntimes) rep(1:3, 2) or rep(c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;), 3) subdivide a numeric vector cut(x, n) cut(linelist$age, 5) take a random sample sample(x, size) sample(linelist$id, size = 5, replace = TRUE) %in% A very useful operator for matching values, and for quickly assessing if a value is within a vector or dataframe. my_vector &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;) &quot;a&quot; %in% my_vector ## [1] TRUE &quot;h&quot; %in% my_vector ## [1] FALSE To ask if a value is not %in% a vector, put an exclamation mark (!) in front of the logic statement: # to negate, put an exclamation in front !&quot;a&quot; %in% my_vector ## [1] FALSE !&quot;h&quot; %in% my_vector ## [1] TRUE %in% is very useful when using the dplyr function case_when(). You can define a vector previously, and then reference it later. For example: affirmative &lt;- c(&quot;1&quot;, &quot;Yes&quot;, &quot;YES&quot;, &quot;yes&quot;, &quot;y&quot;, &quot;Y&quot;, &quot;oui&quot;, &quot;Oui&quot;, &quot;Si&quot;) linelist &lt;- linelist %&gt;% mutate(child_hospitaled = case_when( hospitalized %in% affirmative &amp; age &lt; 18 ~ &quot;Hospitalized Child&quot;, TRUE ~ &quot;Not&quot;)) Note: If you want to detect a partial string, perhaps using str_detect() from stringr, it will not accept a character vector like c(&quot;1&quot;, &quot;Yes&quot;, &quot;yes&quot;, &quot;y&quot;). Instead, it must be given a regular expression - one condensed string with OR bars, such as 1|Yes|yes|y. For example, str_detect(hospitalized, &quot;1|Yes|yes|y&quot;). See the page on Charactersandstrings for more information. You can convert a character vector to a named regular expression with this command: affirmative &lt;- c(&quot;1&quot;, &quot;Yes&quot;, &quot;YES&quot;, &quot;yes&quot;, &quot;y&quot;, &quot;Y&quot;, &quot;oui&quot;, &quot;Oui&quot;, &quot;Si&quot;) affirmative ## [1] &quot;1&quot; &quot;Yes&quot; &quot;YES&quot; &quot;yes&quot; &quot;y&quot; &quot;Y&quot; &quot;oui&quot; &quot;Oui&quot; &quot;Si&quot; # condense to affirmative_str_search &lt;- paste0(affirmative, collapse = &quot;|&quot;) # option with base R affirmative_str_search &lt;- str_c(affirmative, collapse = &quot;|&quot;) # option with stringr package affirmative_str_search ## [1] &quot;1|Yes|YES|yes|y|Y|oui|Oui|Si&quot; 4.13 Errors &amp; warnings This section explains: The difference between errors and warnings General syntax tips for writing R code Code assists Common errors and warnings and troubleshooting tips can be found in the page on Errorsandhelp. Error versus Warning When a command is run, the R Console may show you warning or error messages in red text. A warning means that R has completed your command, but had to take additional steps or produced unusual output that you should be aware of. An error means that R was not able to complete your command. Look for clues: The error/warning message will often include a line number for the problem. If an object is unknown or not found, perhaps you spelled it incorrectly, forgot to call a package with library(), or forgot to re-run your script after making changes. If all else fails, copy the error message into Google along with some key terms - chances are that someone else has worked through this already! General syntax tips A few things to remember when writing commands in R, to avoid errors and warnings: Always close parentheses - tip: count the number of opening ( and closing parentheses ) for each code chunk Avoid spaces in column and object names. Use underscore ( _ ) or periods ( . ) instead Keep track of and remember to separate a functions arguments with commas R is case-sensitive, meaning Variable_A is different from variable_A Code assists Any script (RMarkdown or otherwise) will give clues when you have made a mistake. For example, if you forgot to write a comma where it is needed, or to close a parentheses, RStudio will raise a flag on that line, on the right side of the script, to warn you. 5 Transition to R Placeholder 5.1 From Excel Benefits Tidy data Functions Scripts Excel-to-R resources R-Excel interaction 5.2 From Stata 5.3 From SAS 5.4 Data interoperability 6 Suggested packages Placeholder 6.1 Packages from CRAN 6.2 Packages from Github 7 R projects Placeholder 7.1 Suggested use 7.2 Creating an R project Switch projects Settings Organization Version control 7.3 Examples 7.4 Resources 8 Import and export Placeholder 8.1 Overview 8.2 The rio package 8.3 The here package 8.4 File paths Relative file paths Absolute file paths Select file manually 8.5 Import data Specific Excel sheets Missing values Skip rows Manage a second header row Remove the second header row Make a data dictionary Combine the two header rows Google sheets 8.6 Multiple files - import, export, split, combine 8.7 Import from Github CSV files XLSX files Shapefiles 8.8 Manual data entry Entry by rows Entry by columns Pasting from clipboard 8.9 Import most recent file Dates in file name Use the file info 8.10 APIs HTTP request Packages Publicly-available data Authentication required 8.11 Export With rio package To clipboard 8.12 RDS files 8.13 Rdata files and lists 8.14 Saving plots 8.15 Resources 9 Cleaning data and core functions Placeholder Core functions Nomenclature 9.1 Cleaning pipeline 9.2 Load packages 9.3 Import data Import Review 9.4 Column names Automatic cleaning Manual name cleaning Rename by column position Rename via select() and summarise() Other challenges Empty Excel column names Merged Excel column names and cells 9.5 Select or re-order columns Keep columns tidyselect helper functions Remove columns Standalone Add to the pipe chain 9.6 Deduplication 9.7 Column creation and transformation New columns Convert column class Grouped data Transform multiple columns across() column selection across() functions coalesce() Cumulative math Using base R Add to pipe chain 9.8 Re-code values Specific values By logic Simple logic replace() ifelse() and if_else() Complex logic Missing values Cleaning dictionary Add to pipe chain 9.9 Numeric categories Review distribution age_categories() cut() Quantile breaks Evenly-sized groups case_when() Add to pipe chain 9.10 Add rows One-by-one Bind rows 9.11 Filter rows Simple filter Filter out missing values Filter by row number Complex filter Examine the data How filters handle missing numeric and date values Design the filter Standalone Quickly review records Add to pipe chain 9.12 Row-wise calculations 9.13 Arrange and sort 10 Working with dates Placeholder 10.1 Preparation Load packages Import data 10.2 Current date 10.3 Convert to Date base R lubridate Combine columns 10.4 Excel dates 10.5 Messy dates 10.6 Working with date-time class Convert dates with times Convert times alone Extract time 10.7 Working with dates Extract date components Date math Date intervals 10.8 Date display format() Month-Year 10.9 Epidemiological weeks lubridate Weekly counts Epiweek alternatives 10.10 Converting dates/time zones 10.11 Lagging and leading calculations 10.12 Resources 11 Characters and strings Placeholder 11.1 Preparation Load packages Import data 11.2 Unite, split, and arrange Combine strings Dynamic strings Unite columns Split Split columns Arrange alphabetically base R functions 11.3 Clean and standardise Change case Pad length Truncate Standardize length Remove leading/trailing whitespace Remove repeated whitespace within Wrap into paragraphs 11.4 Handle by position Extract by character position Extract by word position Replace by character position Evaluate length 11.5 Patterns Detect a pattern Convert commas to periods Replace all Detect within logic Locate pattern position Extract a match Subset and count Regex groups 11.6 Special characters 11.7 Regular expressions (regex) 11.8 Regex and special characters 11.9 Resources 12 Factors Placeholder 12.1 Preparation Load packages Import data New categorical variable Create column Default value order 12.2 Convert to factor 12.3 Add or drop levels Add Drop 12.4 Adjust level order Manually Within a plot Reverse By frequency By appearance By summary statistic of another column By end value 12.5 Missing values 12.6 Combine levels Manually Reduce into Other Reduce by frequency 12.7 Show all levels In plots In tables 12.8 Epiweeks Epiweeks in a plot Epiweeks in the data 12.9 Resources 13 Pivoting data Placeholder 13.1 Preparation Load packages Import data Malaria count data Linelist case data 13.2 Wide-to-long Wide format pivot_longer() Standard pivoting Pivoting data of multiple classes 13.3 Long-to-wide Data Pivot wider 13.4 Fill Data fill() 13.5 Resources 14 Grouping data Placeholder 14.1 Preparation Load packages Import data 14.2 Grouping Unique groups New columns Add/drop grouping columns 14.3 Un-group 14.4 Summarise 14.5 Counts and tallies tally() count() Add counts Add totals 14.6 Grouping by date Linelist cases into days Linelist cases into weeks Linelist cases into months Daily counts into weeks Daily counts into months 14.7 Arranging grouped data 14.8 Filter on grouped data filter() Slice rows per group Filter on group size 14.9 Mutate on grouped data 14.10 Select on grouped data 14.11 Resources 15 Joining data Placeholder 15.1 Preparation Load packages Import data Example datasets Miniature case linelist Hospital information data frame Pre-cleaning 15.2 dplyr joins General syntax Left and right joins Should I use a right join, or a left join? Full join Inner join Semi join Anti join Simple anti_join() example Complex anti_join() example 15.3 Probabalistic matching Probabilistic matching Probabilistic deduplication 15.4 Binding and aligning Bind rows Bind columns Use match() to align ordering 15.5 Resources 16 De-duplication Placeholder 16.1 Preparation Load packages Import data Here is the data frame 16.2 Deduplication Examine duplicate rows Keep only unique rows Deduplicate elements in a vector Using base R 16.3 Slicing Slice with groups Keep all but mark them Calculate row completeness 16.4 Roll-up values Roll-up values into one row Overwrite values/hierarchy 16.5 Probabilistic de-duplication 16.6 Resources 17 Iteration, loops, and lists Placeholder 17.1 Preparation Load packages Import data 17.2 for loops for loops in R Core components Sequence Operations Container Printing Testing your for loop Looping plots Tracking progress of a loop 17.3 purrr and lists Load packages map() Example - import and combine Excel sheets Split dataset and export Split dataset More than one group_split() column Export as Excel sheets Export as CSV files Custom functions Mapping a function across columns Extract from lists Names of elements Elements by name or position pluck() Convert list to data frame Discard, keep, and compact lists pmap() 17.4 Apply functions 17.5 Resources 18 Descriptive tables Placeholder 18.1 Preparation Load packages Import data 18.2 Browse data skimr package Summary statistics 18.3 janitor package Simple tabyl Cross-tabulation Adorning the tabyl Printing the tabyl Use on other tables Saving the tabyl Statistics Other tips 18.4 dplyr package Get counts Show all levels Proportions Plotting Summary statistics Conditional statistics Glueing together Percentiles Summarise aggregated data across() multiple columns Pivot wider Total rows janitors adorn_totals() summarise() on total data and then bind_rows() 18.5 gtsummary package Summary table Adjustments Multi-line stats for continuous variables 18.6 base R Proportions Totals Convert to data frame 18.7 Resources 19 Simple statistical tests Placeholder 19.1 Preparation Load packages Import data 19.2 base R T-tests Shapiro-Wilk test Wilcoxon rank sum test Kruskal-Wallis test Chi-squared test 19.3 rstatix package Summary statistics T-test Shapiro-Wilk test Wilcoxon rank sum test Kruskal-Wallis test Chi-squared test 19.4 gtsummary package Chi-squared test T-tests Wilcoxon rank sum test Kruskal-wallis test 19.5 Correlations 19.6 Resources 20 Univariate and multivariable regression Placeholder 20.1 Preparation Load packages Import data Clean data Store explanatory variables Convert to 1s and 0s Drop rows with missing values 20.2 Univariate base R Linear regression Logistic regression Univariate glm() Printing results Looping multiple univariate models gtsummary package 20.3 Stratified 20.4 Multivariable Conduct multivariable Building the model Combine univariate and multivariable Combine with gtsummary Combine with dplyr 20.5 Forest plot ggplot2 package easystats packages 20.6 Resources 21 Missing data Placeholder 21.1 Preparation Load packages Import data Convert missing on import 21.2 Missing values in R NA Versions of NA NULL NaN Inf Examples 21.3 Useful functions is.na() and !is.na() na.omit() drop_na() na.rm = TRUE 21.4 Assess missingness in a data frame Quantifying missingness Visualizing missingness Explore and visualize missingness relationships Shadow columns 21.5 Using data with missing values Filter out rows with missing values Handling NA in ggplot() NA in factors 21.6 Imputation Types of missing data Useful packages Mean Imputation Regression imputation LOCF and BOCF Multiple Imputation 21.7 Resources 22 Standardised rates Placeholder 22.1 Overview 22.2 Preparation Load packages Load population data Load death counts Clean populations and deaths Load reference population Clean reference population Create dataset with standard population 22.3 dsr package Standardized rates Standardized rate ratios Standardized rate difference 22.4 PHEindicatormethods package Directly standardized rates Indirectly standardized rates 22.5 Resources 23 Moving averages Placeholder 23.1 Preparation Load packages Import data 23.2 Calculate with slider Rolling by date Indexed data Rolling by group 23.3 Calculate with tidyquant within ggplot() 23.4 Resources 24 Time series and outbreak detection Placeholder 24.1 Overview 24.2 Preparation Packages Load data Clean data Download climate data Load climate data 24.3 Time series data Duplicates Missings 24.4 Descriptive analysis Moving averages Periodicity Decomposition Autocorrelation 24.5 Fitting regressions Fourier terms Negative binomial Residuals 24.6 Relation of two time series Merging datasets Descriptive analysis Lags and cross-correlation Negative binomial with two variables Residuals 24.7 Outbreak detection trending package Cut-off date Add rows Fourier terms Split data and fit regression Prediction validation surveillance package Farrington method GLRNB method 24.8 Interrupted timeseries 24.9 Resources 25 Epidemic modeling Placeholder 25.1 Overview 25.2 Preparation 25.3 Estimating Rt EpiNow2 vs. EpiEstim EpiNow2 Estimating delay distributions Running EpiNow2 Analysing outputs EpiEstim Using serial interval estimates from the literature Using serial interval estimates from the data Specifying estimation time windows Analysing outputs 25.4 Projecting incidence EpiNow2 projections Using serial interval estimates from the literature Using serial interval estimates from the data Projecting incidence 25.5 Resources 26 Contact tracing Placeholder 26.1 Preparation Load packages Import data Case data Contacts data Follow-up data Relationships data 26.2 Descriptive analyses Demographics Age and Gender of contacts Contacts per case 26.3 Contact Follow Up Data cleaning Plot over time Daily individual tracking Analyse by group 26.4 KPI Tables 26.5 Transmission Matrices 26.6 Resources 27 Survey analysis Placeholder 27.1 Overview 27.2 Preparation Packages Load data Clean data 27.3 Survey data 27.4 Observation time 27.5 Weighting 27.6 Survey design objects 27.6.1 Survey package 27.6.2 Srvyr package 27.7 Descriptive analysis 27.7.1 Sampling bias 27.7.2 Demographic pyramids 27.7.3 Alluvial/sankey diagram 27.8 Weighted proportions 27.8.1 Survey package 27.8.2 Srvyr package 27.8.3 Sitrep package 27.8.4 Gtsummary package 27.9 Weighted ratios 27.9.1 Survey package 27.9.2 Srvyr package 27.10 Resources 28 Survival analysis Placeholder 28.1 Overview 28.2 Preparation Load packages Import dataset Data management and transformation 28.3 Basics of survival analysis Building a surv-type object Running initial analyses Cumulative hazard Plotting Kaplan-Meir curves 28.4 Comparison of survival curves Log rank test 28.5 Cox regression analysis Fitting a Cox model Forest plots 28.6 Time-dependent covariates in survival models Time-dependent covariate setup Add unique patient identifier Expand patient rows Cox regression with time-dependent covariates 28.7 Resources 29 GIS basics Placeholder 29.1 Overview 29.2 Key terms GIS software Spatial data Visualizing spatial data 29.3 Getting started with GIS Types of maps for visualizing your data 29.4 Preparation Load packages Sample case data Admin boundary shapefiles Population data Health Facilities 29.5 Plotting coordinates 29.6 Spatial joins Points in polygon Nearest neighbor Buffers Other spatial joins 29.7 Choropleth maps 29.8 Mapping with ggplot2 29.9 Basemaps OpenStreetMap 29.10 Contoured density heatmaps Time series heatmap 29.11 Spatial statistics Spatial relationships Spatial autocorrelation Spatial regression 29.12 Resources 30 Tables for presentation Placeholder 30.1 Preparation Load packages Import data Prepare table 30.2 Basic flextable Create a flextable Column width Column headers Borders and background Font and alignment Merge cells Background color 30.3 Conditional formatting 30.4 All code together 30.5 Saving your table Save single table Print table in R markdown 30.6 Resources 31 ggplot basics Placeholder 31.1 Preparation Load packages Import data General cleaning Pivoting longer 31.2 Basics of ggplot 31.3 ggplot() 31.4 Geoms 31.5 Mapping data to the plot Plot aesthetics Set to a static value Scaled to column values Where to make mapping assignments Groups 31.6 Facets / Small-multiples facet_wrap() facet_grid() Free or fixed axes Factor level order in facets 31.7 Storing plots Saving plots Modifying saved plots Exporting plots 31.8 Labels 31.9 Themes Complete themes Modify theme 31.10 Colors 31.11 Piping into ggplot2 31.12 Plot continuous data Histograms Box plots Violin, jitter, and sina plots Two continuous variables Three continuous variables 31.13 Plot categorical data Preparation Data structure Column class and value ordering geom_bar() geom_col() geom_histogram() 31.14 Resources 32 ggplot tips Placeholder 32.1 Preparation Load packages Import data 32.2 Scales for color, fill, axes, etc. 32.2.1 Color schemes Scales Scale arguments Manual adjustments Continuous axes scales Display percents Log scale Gradient scales Palettes Colorbrewer and Viridis 32.3 Change order of discrete variables 32.3.0.1 ggthemr 32.4 Contour lines 32.5 Marginal distributions 32.6 Smart Labeling 32.7 Time axes 32.8 Highlighting 32.9 Plotting multiple datasets 32.10 Combine plots plot_grid() Combine legends Inset plots 32.11 Dual axes 32.12 Packages to help you Point-and-click ggplot2 with equisse 32.13 Miscellaneous Numeric display 32.14 Resources 33 Epidemic curves Placeholder 33.1 Preparation Packages Import data Set parameters Verify dates 33.2 Epicurves with incidence2 package Simple example Change time interval of case aggregation Groups Filtered data Aggregated counts Facets/small multiples Modifications with plot() Modifications with ggplot2 Change colors Specify a palette Specify manually Adjust level order Vertical gridlines Cumulative incidence Rolling average 33.3 Epicurves with ggplot2 Specify case bins Weekly epicurve example Sunday weeks Group/color by value Adjust colors Adjust level order Adjust legend Bars side-by-side Axis limits Date-axis labels/gridlines Demonstrations Aggregated data Plotting daily counts Plotting weekly counts Moving averages Faceting/small-multiples Total epidemic in facet background One facet with data 33.4 Tentative data Using annotate() Bars color 33.5 Multi-level date labels 33.6 Dual-axis 33.7 Cumulative Incidence 33.8 Resources 34 Demographic pyramids and Likert-scales Placeholder 34.1 Preparation Load packages Import data Cleaning 34.2 apyramid package Linelist data Missing values Proportions, colors, &amp; aesthetics Aggregated data 34.3 ggplot() Preparation Constructing the plot Compare to baseline 34.4 Likert scale 34.5 Resources 35 Heat plots Placeholder 35.1 Preparation Load packages 35.2 Transmission matrix Data preparation Make cases data frame Make infectors data frame Create heat plot 35.3 Reporting metrics over time Data preparation Aggregate and summarize Create heat plot Basic Cleaned plot Ordered y-axis Display values 35.4 Resources 36 Diagrams and charts Placeholder 36.1 Preparation Load packages Import data 36.2 Flow diagrams Simple examples Syntax Complex examples Outputs Parameterized figures 36.3 Alluvial/Sankey Diagrams Load packages Plotting from dataset 36.4 Event timelines 36.5 DAGs 36.6 Resources 37 Combinations analysis Placeholder 37.1 Preparation Load packages Import data Re-format values 37.2 ggupset 37.3 UpSetR 37.4 Resources 38 Transmission chains Placeholder 38.1 Overview 38.2 Preparation Load packages Import data Creating an epicontacts object 38.3 Handling Subsetting Accessing IDs 38.4 Visualization Basic plotting Visualising node attributes Visualising edge attributes Temporal axis Specifying transmission tree shape Saving plots and figures Timelines 38.5 Analysis Summarising Pairwise characteristics Identifying clusters Calculating degrees 38.6 Resources 39 Phylogenetic trees Placeholder 39.1 Overview 39.2 Preparation Load packages Import data Clean and inspect 39.3 Simple tree visualization Different tree layouts Simple tree plus sample data 39.4 Tree manipulation Zoom in Collapsing branches Subsetting a tree Rotating nodes in a tree Example subtree with sample data annotation More complex trees: adding heatmaps of sample data 39.5 Resources 40 Interactive plots Placeholder 40.1 Preparation Load packages Start with a ggplot() Import data 40.2 Plot with ggplotly() 40.3 Modifications File size Buttons 40.4 Heat tiles 40.5 Resources 41 Reports with R Markdown Placeholder 41.1 Preparation 41.2 Getting started Install rmarkdown R package Starting a new Rmd file Important to know 41.3 R Markdown components YAML metadata Text New lines Case Color Titles and headings Bullets and numbering Comment out text Code chunks In-text R code Images Tables Tabbed sections 41.4 File structure Self-contained Rmd Source other files Runfile Folder strucutre 41.5 Producing the document Option 1: Knit button Option 2: render() command Options 3: reportfactory package 41.6 Parameterised reports Setting parameters Option 1: Set parameters within YAML Option 2: Set parameters within render() Option 3: Set parameters using a Graphical User Interface Parameterized example Parameterisation without params 41.7 Looping reports 41.8 Templates Word documents Powerpoint documents Integrating templates into the YAML Formatting HTML files 41.9 Dynamic content Tables HTML widgets 41.10 Resources 42 Organizing routine reports Placeholder 42.1 Preparation Load packages 42.2 New factory 42.3 Create a report 42.4 Compile Compile by name Compile by number Compile all Compile from sub-folder Parameterization Using a run-file 42.5 Outputs 42.6 Miscellaneous Knit Scripts Extras 42.7 Resources 43 Dashboards with R Markdown Placeholder 43.1 Preparation Load packages Import data 43.2 Create new R Markdown 43.3 The script YAML Code chunks Narrative text Headings 43.4 Section attributes 43.5 Layout Pages Orientation Tabs 43.6 Adding content Text Tables Plots Interactive plots HTML widgets 43.7 Code organization 43.8 Shiny Settings Worked example Other examples 43.9 Sharing 43.10 Resources 44 Dashboards with Shiny Placeholder 44.1 Preparation Load packages Import data 44.2 The structure of a shiny app Basic file structures The server and the ui Before you start to build an app 44.3 Building a UI 44.4 Loading data into our app 44.5 Developing an app server 44.6 Adding more functionality Adding static text Adding a link Adding a download button Adding a facility selector Adding another tab with a table 44.7 Sharing shiny apps 44.8 Further reading 44.9 Recommended extension packages 44.10 Recommended resources 45 Writing functions Placeholder 45.1 Preparation Load packages Import data 45.2 Functions 45.3 Why would you use a function? 45.4 How does R build functions? 45.5 Basic syntax and structure 45.6 Examples Return proportion tables for several columns 45.7 Using purrr: writing functions that can be iteratively applied Modify class of multiple columns in a dataset Iteratively produce graphs for different levels of a variable Iteratively produce tables for different levels of a variable 45.8 Tips and best Practices for well functioning functions Naming and syntax Column names and tidy evaluation Testing and Error handling 45.9 Resources 46 Directory interactions Placeholder 46.1 Preparation fs package Print directory as a dendrogram tree 46.2 List files in a directory 46.3 File information 46.4 Check if exists R objects Directories Files 46.5 Create Directories Files Create if does not exists 46.6 Delete R objects Directories Files 46.7 Running other files source() render() Run files in a directory Import files in a directory 46.8 base R 46.9 Resources 47 Version control and collaboration with Git and Github Placeholder 47.1 What is Git? 47.2 Why use the combo Git and Github? This sounds complicated, I am not a programmer 47.3 Setup Install Git Install an interface (optional but recommended) Github account 47.4 Vocabulary, concepts and basic functions Repository Commits Branches Local and remote repositories 47.5 Get started: create a new repository Start-up files Create a new repository in Github Clone from a Github repository In Rstudio In Github Desktop New Github repo from existing R project What does it look like now? In RStudio In Github Desktop 47.6 Git + Github workflow Process overview 47.7 Create a new branch In Rstudio Git pane In Github Desktop In console 47.8 Commit changes In Rstudio In Github Desktop In console Amend a previous commit 47.9 Pull and push changes up to Github In Rstudio In Github Desktop Console I want to pull but I have local work 47.10 Merge branch into Main Locally in Github Desktop In console In Github: submitting pull requests Resolving conflicts Delete your branch 47.10.0.1 Github + Rstudio 47.10.0.2 In Github Desktop Forking 47.11 What we learned 47.12 Git commands Recommended learning Where to enter commands Sample commands 47.13 Resources 48 Common errors Placeholder 48.1 Interpreting error messages 48.2 Common errors Typo errors Package errors Object errors Function syntax errors Logic errors Factor errors Plotting errors R Markdown errors Miscellaneous 48.3 Resources 49 Getting help Placeholder 49.1 Github issues 49.2 Reproducible example The reprex package Minimal data 49.3 Posting to a forum 49.4 Resources 50 R on network drives Placeholder 50.1 Overview 50.2 RStudio as administrator 50.3 Useful commands 50.4 Troubleshooting common errors 51 Data Table Placeholder 51.1 Intro to data tables 51.2 Load packages and import data Load packages Import data 51.3 The i argument: selecting and filtering rows Using helper functions for filtering 51.4 The j argument: selecting and computing on columns Selecting columns Computing on columns 51.5 The by argument: computing by groups 51.6 Adding and updating to data tables 51.7 Resources "]]
